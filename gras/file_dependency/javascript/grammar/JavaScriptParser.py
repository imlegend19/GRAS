# Generated from JavaScriptParser.g4 by ANTLR 4.7.1
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO

from gras.file_dependency.javascript.grammar.JavaScriptParserBase import JavaScriptParserBase


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3~")
        buf.write("\u0403\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\3\2")
        buf.write("\5\2\u009a\n\2\3\2\5\2\u009d\n\2\3\2\3\2\3\3\3\3\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\5\4\u00b7\n\4\3\5\3\5\5\5\u00bb\n")
        buf.write("\5\3\5\3\5\3\6\6\6\u00c0\n\6\r\6\16\6\u00c1\3\7\3\7\3")
        buf.write("\7\3\b\5\b\u00c8\n\b\3\b\3\b\5\b\u00cc\n\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u00d3\n\b\3\t\3\t\3\t\3\t\7\t\u00d9\n\t\f")
        buf.write("\t\16\t\u00dc\13\t\3\t\3\t\5\t\u00e0\n\t\5\t\u00e2\n\t")
        buf.write("\3\t\3\t\3\n\3\n\3\n\3\13\3\13\5\13\u00eb\n\13\3\13\3")
        buf.write("\13\5\13\u00ef\n\13\3\f\3\f\3\f\3\r\3\r\3\r\5\r\u00f7")
        buf.write("\n\r\3\16\3\16\3\16\5\16\u00fc\n\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u0105\n\16\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\5\17\u010d\n\17\3\17\3\17\5\17\u0111\n\17\3\20")
        buf.write("\3\20\3\20\5\20\u0116\n\20\3\21\3\21\3\21\3\22\3\22\3")
        buf.write("\22\3\22\7\22\u011f\n\22\f\22\16\22\u0122\13\22\3\23\3")
        buf.write("\23\3\23\5\23\u0127\n\23\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0136\n\26\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u014a\n\27\3")
        buf.write("\27\3\27\5\27\u014e\n\27\3\27\3\27\5\27\u0152\n\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\5\27\u015a\n\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\5\27\u0163\n\27\3\27\3\27\3\27")
        buf.write("\5\27\u0168\n\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0170")
        buf.write("\n\27\3\30\3\30\3\30\5\30\u0175\n\30\3\31\3\31\3\31\5")
        buf.write("\31\u017a\n\31\3\31\3\31\3\32\3\32\3\32\5\32\u0181\n\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\5\33\u0188\n\33\3\33\3\33\3")
        buf.write("\34\3\34\3\34\5\34\u018f\n\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\5\37\u01a1\n\37\3\37\3\37\5\37\u01a5\n\37\5\37\u01a7")
        buf.write("\n\37\3\37\3\37\3 \6 \u01ac\n \r \16 \u01ad\3!\3!\3!\3")
        buf.write("!\5!\u01b4\n!\3\"\3\"\3\"\5\"\u01b9\n\"\3#\3#\3#\3#\3")
        buf.write("$\3$\3$\3$\3$\3%\3%\3%\3%\5%\u01c8\n%\3%\5%\u01cb\n%\3")
        buf.write("&\3&\3&\5&\u01d0\n&\3&\5&\u01d3\n&\3&\3&\3\'\3\'\3\'\3")
        buf.write("(\3(\3(\3)\5)\u01de\n)\3)\3)\5)\u01e2\n)\3)\3)\3)\5)\u01e7")
        buf.write("\n)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3+\3+\5+\u01f4\n+\3+\3")
        buf.write("+\7+\u01f8\n+\f+\16+\u01fb\13+\3+\3+\3,\3,\3,\3,\7,\u0203")
        buf.write("\n,\f,\16,\u0206\13,\3,\3,\3,\3,\3,\3,\5,\u020e\n,\3,")
        buf.write("\3,\5,\u0212\n,\3,\3,\3,\3,\5,\u0218\n,\3-\5-\u021b\n")
        buf.write("-\3-\5-\u021e\n-\3-\3-\3-\5-\u0223\n-\3-\3-\3-\3-\3-\3")
        buf.write("-\5-\u022b\n-\3-\5-\u022e\n-\3-\3-\3-\3-\3-\3-\3-\3-\5")
        buf.write("-\u0238\n-\3-\5-\u023b\n-\3-\3-\3-\5-\u0240\n-\3-\3-\3")
        buf.write("-\3-\3-\5-\u0247\n-\3.\3.\3.\7.\u024c\n.\f.\16.\u024f")
        buf.write("\13.\3.\3.\5.\u0253\n.\3.\5.\u0256\n.\3/\3/\3/\5/\u025b")
        buf.write("\n/\3\60\3\60\3\60\3\61\5\61\u0261\n\61\3\62\6\62\u0264")
        buf.write("\n\62\r\62\16\62\u0265\3\63\3\63\3\63\3\63\3\64\7\64\u026d")
        buf.write("\n\64\f\64\16\64\u0270\13\64\3\64\5\64\u0273\n\64\3\64")
        buf.write("\6\64\u0276\n\64\r\64\16\64\u0277\3\64\7\64\u027b\n\64")
        buf.write("\f\64\16\64\u027e\13\64\3\64\7\64\u0281\n\64\f\64\16\64")
        buf.write("\u0284\13\64\3\65\5\65\u0287\n\65\3\65\3\65\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0296")
        buf.write("\n\66\3\66\5\66\u0299\n\66\3\66\3\66\3\66\5\66\u029e\n")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\5\66\u02b5\n\66\3\66\5\66\u02b8\n\66\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\5\67\u02c1\n\67\38\38\38\38\78\u02c7")
        buf.write("\n8\f8\168\u02ca\138\38\58\u02cd\n8\58\u02cf\n8\38\38")
        buf.write("\39\59\u02d4\n9\39\39\59\u02d8\n9\3:\3:\3:\7:\u02dd\n")
        buf.write(":\f:\16:\u02e0\13:\3;\3;\3;\3;\5;\u02e6\n;\3;\3;\3;\3")
        buf.write(";\5;\u02ec\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\5;\u0315\n;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\5;\u0355\n;\3;\3;\5;\u0359\n;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\7;\u0366\n;\f;\16;\u0369\13;\3<\3<\3<\5")
        buf.write("<\u036e\n<\3=\3=\3=\3=\7=\u0374\n=\f=\16=\u0377\13=\5")
        buf.write("=\u0379\n=\3=\5=\u037c\n=\3=\3=\3>\3>\5>\u0382\n>\3>\3")
        buf.write(">\5>\u0386\n>\3>\3>\5>\u038a\n>\3>\3>\3>\3>\3>\3>\5>\u0392")
        buf.write("\n>\3>\3>\3>\3>\5>\u0398\n>\3?\3?\3?\5?\u039d\n?\3?\5")
        buf.write("?\u03a0\n?\3@\3@\3@\3@\3@\5@\u03a7\n@\3A\3A\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u03b2\nB\3C\3C\3D\3D\3E\3E\3E\3E\3F\3F\3")
        buf.write("F\3F\3G\3G\5G\u03c2\nG\3H\3H\3I\3I\3I\5I\u03c9\nI\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u03f9\nJ\3K\3K\3L\3L\3L\3")
        buf.write("L\5L\u0401\nL\3L\2\3tM\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\2\f\3\2\32\34\3\2\26\27")
        buf.write("\3\2 \"\3\2#&\3\2\'*\3\2\60;\3\2?C\3\2DG\5\2kkooww\3\2")
        buf.write("no\2\u04a7\2\u0099\3\2\2\2\4\u00a0\3\2\2\2\6\u00b6\3\2")
        buf.write("\2\2\b\u00b8\3\2\2\2\n\u00bf\3\2\2\2\f\u00c3\3\2\2\2\16")
        buf.write("\u00d2\3\2\2\2\20\u00d4\3\2\2\2\22\u00e5\3\2\2\2\24\u00ea")
        buf.write("\3\2\2\2\26\u00f0\3\2\2\2\30\u00f3\3\2\2\2\32\u0104\3")
        buf.write("\2\2\2\34\u0110\3\2\2\2\36\u0115\3\2\2\2 \u0117\3\2\2")
        buf.write("\2\"\u011a\3\2\2\2$\u0123\3\2\2\2&\u0128\3\2\2\2(\u012a")
        buf.write("\3\2\2\2*\u012e\3\2\2\2,\u016f\3\2\2\2.\u0174\3\2\2\2")
        buf.write("\60\u0176\3\2\2\2\62\u017d\3\2\2\2\64\u0184\3\2\2\2\66")
        buf.write("\u018b\3\2\2\28\u0192\3\2\2\2:\u0198\3\2\2\2<\u019e\3")
        buf.write("\2\2\2>\u01ab\3\2\2\2@\u01af\3\2\2\2B\u01b5\3\2\2\2D\u01ba")
        buf.write("\3\2\2\2F\u01be\3\2\2\2H\u01c3\3\2\2\2J\u01cc\3\2\2\2")
        buf.write("L\u01d6\3\2\2\2N\u01d9\3\2\2\2P\u01dd\3\2\2\2R\u01ed\3")
        buf.write("\2\2\2T\u01f3\3\2\2\2V\u0217\3\2\2\2X\u0246\3\2\2\2Z\u0255")
        buf.write("\3\2\2\2\\\u0257\3\2\2\2^\u025c\3\2\2\2`\u0260\3\2\2\2")
        buf.write("b\u0263\3\2\2\2d\u0267\3\2\2\2f\u026e\3\2\2\2h\u0286\3")
        buf.write("\2\2\2j\u02b7\3\2\2\2l\u02c0\3\2\2\2n\u02c2\3\2\2\2p\u02d3")
        buf.write("\3\2\2\2r\u02d9\3\2\2\2t\u0314\3\2\2\2v\u036d\3\2\2\2")
        buf.write("x\u036f\3\2\2\2z\u0397\3\2\2\2|\u039f\3\2\2\2~\u03a6\3")
        buf.write("\2\2\2\u0080\u03a8\3\2\2\2\u0082\u03b1\3\2\2\2\u0084\u03b3")
        buf.write("\3\2\2\2\u0086\u03b5\3\2\2\2\u0088\u03b7\3\2\2\2\u008a")
        buf.write("\u03bb\3\2\2\2\u008c\u03c1\3\2\2\2\u008e\u03c3\3\2\2\2")
        buf.write("\u0090\u03c8\3\2\2\2\u0092\u03f8\3\2\2\2\u0094\u03fa\3")
        buf.write("\2\2\2\u0096\u0400\3\2\2\2\u0098\u009a\7\3\2\2\u0099\u0098")
        buf.write("\3\2\2\2\u0099\u009a\3\2\2\2\u009a\u009c\3\2\2\2\u009b")
        buf.write("\u009d\5b\62\2\u009c\u009b\3\2\2\2\u009c\u009d\3\2\2\2")
        buf.write("\u009d\u009e\3\2\2\2\u009e\u009f\7\2\2\3\u009f\3\3\2\2")
        buf.write("\2\u00a0\u00a1\5\6\4\2\u00a1\5\3\2\2\2\u00a2\u00b7\5\b")
        buf.write("\5\2\u00a3\u00b7\5 \21\2\u00a4\u00b7\5\f\7\2\u00a5\u00b7")
        buf.write("\5\32\16\2\u00a6\u00b7\5&\24\2\u00a7\u00b7\5R*\2\u00a8")
        buf.write("\u00b7\5(\25\2\u00a9\u00b7\5*\26\2\u00aa\u00b7\5,\27\2")
        buf.write("\u00ab\u00b7\5\60\31\2\u00ac\u00b7\5\62\32\2\u00ad\u00b7")
        buf.write("\5\64\33\2\u00ae\u00b7\5\66\34\2\u00af\u00b7\58\35\2\u00b0")
        buf.write("\u00b7\5D#\2\u00b1\u00b7\5:\36\2\u00b2\u00b7\5F$\2\u00b3")
        buf.write("\u00b7\5H%\2\u00b4\u00b7\5N(\2\u00b5\u00b7\5P)\2\u00b6")
        buf.write("\u00a2\3\2\2\2\u00b6\u00a3\3\2\2\2\u00b6\u00a4\3\2\2\2")
        buf.write("\u00b6\u00a5\3\2\2\2\u00b6\u00a6\3\2\2\2\u00b6\u00a7\3")
        buf.write("\2\2\2\u00b6\u00a8\3\2\2\2\u00b6\u00a9\3\2\2\2\u00b6\u00aa")
        buf.write("\3\2\2\2\u00b6\u00ab\3\2\2\2\u00b6\u00ac\3\2\2\2\u00b6")
        buf.write("\u00ad\3\2\2\2\u00b6\u00ae\3\2\2\2\u00b6\u00af\3\2\2\2")
        buf.write("\u00b6\u00b0\3\2\2\2\u00b6\u00b1\3\2\2\2\u00b6\u00b2\3")
        buf.write("\2\2\2\u00b6\u00b3\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b5")
        buf.write("\3\2\2\2\u00b7\7\3\2\2\2\u00b8\u00ba\7\13\2\2\u00b9\u00bb")
        buf.write("\5\n\6\2\u00ba\u00b9\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb")
        buf.write("\u00bc\3\2\2\2\u00bc\u00bd\7\f\2\2\u00bd\t\3\2\2\2\u00be")
        buf.write("\u00c0\5\6\4\2\u00bf\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2")
        buf.write("\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\13\3\2")
        buf.write("\2\2\u00c3\u00c4\7j\2\2\u00c4\u00c5\5\16\b\2\u00c5\r\3")
        buf.write("\2\2\2\u00c6\u00c8\5\22\n\2\u00c7\u00c6\3\2\2\2\u00c7")
        buf.write("\u00c8\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00cc\5\24\13")
        buf.write("\2\u00ca\u00cc\5\20\t\2\u00cb\u00c9\3\2\2\2\u00cb\u00ca")
        buf.write("\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce\5\26\f\2\u00ce")
        buf.write("\u00cf\5\u0096L\2\u00cf\u00d3\3\2\2\2\u00d0\u00d1\7x\2")
        buf.write("\2\u00d1\u00d3\5\u0096L\2\u00d2\u00c7\3\2\2\2\u00d2\u00d0")
        buf.write("\3\2\2\2\u00d3\17\3\2\2\2\u00d4\u00da\7\13\2\2\u00d5\u00d6")
        buf.write("\5\30\r\2\u00d6\u00d7\7\16\2\2\u00d7\u00d9\3\2\2\2\u00d8")
        buf.write("\u00d5\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00da\u00db\3\2\2\2\u00db\u00e1\3\2\2\2\u00dc\u00da\3")
        buf.write("\2\2\2\u00dd\u00df\5\30\r\2\u00de\u00e0\7\16\2\2\u00df")
        buf.write("\u00de\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e2\3\2\2\2")
        buf.write("\u00e1\u00dd\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e3\3")
        buf.write("\2\2\2\u00e3\u00e4\7\f\2\2\u00e4\21\3\2\2\2\u00e5\u00e6")
        buf.write("\5\30\r\2\u00e6\u00e7\7\16\2\2\u00e7\23\3\2\2\2\u00e8")
        buf.write("\u00eb\7\32\2\2\u00e9\u00eb\5\u008cG\2\u00ea\u00e8\3\2")
        buf.write("\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ed")
        buf.write("\7b\2\2\u00ed\u00ef\5\u008cG\2\u00ee\u00ec\3\2\2\2\u00ee")
        buf.write("\u00ef\3\2\2\2\u00ef\25\3\2\2\2\u00f0\u00f1\7c\2\2\u00f1")
        buf.write("\u00f2\7x\2\2\u00f2\27\3\2\2\2\u00f3\u00f6\5\u008cG\2")
        buf.write("\u00f4\u00f5\7b\2\2\u00f5\u00f7\5\u008cG\2\u00f6\u00f4")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\31\3\2\2\2\u00f8\u00fb")
        buf.write("\7i\2\2\u00f9\u00fc\5\34\17\2\u00fa\u00fc\5\36\20\2\u00fb")
        buf.write("\u00f9\3\2\2\2\u00fb\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2")
        buf.write("\u00fd\u00fe\5\u0096L\2\u00fe\u0105\3\2\2\2\u00ff\u0100")
        buf.write("\7i\2\2\u0100\u0101\7\\\2\2\u0101\u0102\5t;\2\u0102\u0103")
        buf.write("\5\u0096L\2\u0103\u0105\3\2\2\2\u0104\u00f8\3\2\2\2\u0104")
        buf.write("\u00ff\3\2\2\2\u0105\33\3\2\2\2\u0106\u0107\5\24\13\2")
        buf.write("\u0107\u0108\5\26\f\2\u0108\u0109\5\u0096L\2\u0109\u0111")
        buf.write("\3\2\2\2\u010a\u010c\5\20\t\2\u010b\u010d\5\26\f\2\u010c")
        buf.write("\u010b\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010e\3\2\2\2")
        buf.write("\u010e\u010f\5\u0096L\2\u010f\u0111\3\2\2\2\u0110\u0106")
        buf.write("\3\2\2\2\u0110\u010a\3\2\2\2\u0111\35\3\2\2\2\u0112\u0116")
        buf.write("\5 \21\2\u0113\u0116\5R*\2\u0114\u0116\5P)\2\u0115\u0112")
        buf.write("\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0114\3\2\2\2\u0116")
        buf.write("\37\3\2\2\2\u0117\u0118\5\"\22\2\u0118\u0119\5\u0096L")
        buf.write("\2\u0119!\3\2\2\2\u011a\u011b\5.\30\2\u011b\u0120\5$\23")
        buf.write("\2\u011c\u011d\7\16\2\2\u011d\u011f\5$\23\2\u011e\u011c")
        buf.write("\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121#\3\2\2\2\u0122\u0120\3\2\2\2\u0123")
        buf.write("\u0126\5v<\2\u0124\u0125\7\17\2\2\u0125\u0127\5t;\2\u0126")
        buf.write("\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127%\3\2\2\2\u0128")
        buf.write("\u0129\7\r\2\2\u0129\'\3\2\2\2\u012a\u012b\6\25\2\2\u012b")
        buf.write("\u012c\5r:\2\u012c\u012d\5\u0096L\2\u012d)\3\2\2\2\u012e")
        buf.write("\u012f\7]\2\2\u012f\u0130\7\t\2\2\u0130\u0131\5r:\2\u0131")
        buf.write("\u0132\7\n\2\2\u0132\u0135\5\6\4\2\u0133\u0134\7M\2\2")
        buf.write("\u0134\u0136\5\6\4\2\u0135\u0133\3\2\2\2\u0135\u0136\3")
        buf.write("\2\2\2\u0136+\3\2\2\2\u0137\u0138\7I\2\2\u0138\u0139\5")
        buf.write("\6\4\2\u0139\u013a\7W\2\2\u013a\u013b\7\t\2\2\u013b\u013c")
        buf.write("\5r:\2\u013c\u013d\7\n\2\2\u013d\u013e\5\u0096L\2\u013e")
        buf.write("\u0170\3\2\2\2\u013f\u0140\7W\2\2\u0140\u0141\7\t\2\2")
        buf.write("\u0141\u0142\5r:\2\u0142\u0143\7\n\2\2\u0143\u0144\5\6")
        buf.write("\4\2\u0144\u0170\3\2\2\2\u0145\u0146\7U\2\2\u0146\u0149")
        buf.write("\7\t\2\2\u0147\u014a\5r:\2\u0148\u014a\5\"\22\2\u0149")
        buf.write("\u0147\3\2\2\2\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2")
        buf.write("\u014a\u014b\3\2\2\2\u014b\u014d\7\r\2\2\u014c\u014e\5")
        buf.write("r:\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f")
        buf.write("\3\2\2\2\u014f\u0151\7\r\2\2\u0150\u0152\5r:\2\u0151\u0150")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0153\3\2\2\2\u0153")
        buf.write("\u0154\7\n\2\2\u0154\u0170\5\6\4\2\u0155\u0156\7U\2\2")
        buf.write("\u0156\u0159\7\t\2\2\u0157\u015a\5t;\2\u0158\u015a\5\"")
        buf.write("\22\2\u0159\u0157\3\2\2\2\u0159\u0158\3\2\2\2\u015a\u015b")
        buf.write("\3\2\2\2\u015b\u015c\7`\2\2\u015c\u015d\5r:\2\u015d\u015e")
        buf.write("\7\n\2\2\u015e\u015f\5\6\4\2\u015f\u0170\3\2\2\2\u0160")
        buf.write("\u0162\7U\2\2\u0161\u0163\7l\2\2\u0162\u0161\3\2\2\2\u0162")
        buf.write("\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0167\7\t\2\2")
        buf.write("\u0165\u0168\5t;\2\u0166\u0168\5\"\22\2\u0167\u0165\3")
        buf.write("\2\2\2\u0167\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016a")
        buf.write("\5\u008eH\2\u016a\u016b\6\27\3\2\u016b\u016c\5r:\2\u016c")
        buf.write("\u016d\7\n\2\2\u016d\u016e\5\6\4\2\u016e\u0170\3\2\2\2")
        buf.write("\u016f\u0137\3\2\2\2\u016f\u013f\3\2\2\2\u016f\u0145\3")
        buf.write("\2\2\2\u016f\u0155\3\2\2\2\u016f\u0160\3\2\2\2\u0170-")
        buf.write("\3\2\2\2\u0171\u0175\7O\2\2\u0172\u0175\5\u0094K\2\u0173")
        buf.write("\u0175\7h\2\2\u0174\u0171\3\2\2\2\u0174\u0172\3\2\2\2")
        buf.write("\u0174\u0173\3\2\2\2\u0175/\3\2\2\2\u0176\u0179\7T\2\2")
        buf.write("\u0177\u0178\6\31\4\2\u0178\u017a\5\u008eH\2\u0179\u0177")
        buf.write("\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017b\3\2\2\2\u017b")
        buf.write("\u017c\5\u0096L\2\u017c\61\3\2\2\2\u017d\u0180\7H\2\2")
        buf.write("\u017e\u017f\6\32\5\2\u017f\u0181\5\u008eH\2\u0180\u017e")
        buf.write("\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("\u0183\5\u0096L\2\u0183\63\3\2\2\2\u0184\u0187\7R\2\2")
        buf.write("\u0185\u0186\6\33\6\2\u0186\u0188\5r:\2\u0187\u0185\3")
        buf.write("\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a")
        buf.write("\5\u0096L\2\u018a\65\3\2\2\2\u018b\u018e\7v\2\2\u018c")
        buf.write("\u018d\6\34\7\2\u018d\u018f\5r:\2\u018e\u018c\3\2\2\2")
        buf.write("\u018e\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\5")
        buf.write("\u0096L\2\u0191\67\3\2\2\2\u0192\u0193\7[\2\2\u0193\u0194")
        buf.write("\7\t\2\2\u0194\u0195\5r:\2\u0195\u0196\7\n\2\2\u0196\u0197")
        buf.write("\5\6\4\2\u01979\3\2\2\2\u0198\u0199\7V\2\2\u0199\u019a")
        buf.write("\7\t\2\2\u019a\u019b\5r:\2\u019b\u019c\7\n\2\2\u019c\u019d")
        buf.write("\5<\37\2\u019d;\3\2\2\2\u019e\u01a0\7\13\2\2\u019f\u01a1")
        buf.write("\5> \2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a6")
        buf.write("\3\2\2\2\u01a2\u01a4\5B\"\2\u01a3\u01a5\5> \2\u01a4\u01a3")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6")
        buf.write("\u01a2\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3\2\2\2")
        buf.write("\u01a8\u01a9\7\f\2\2\u01a9=\3\2\2\2\u01aa\u01ac\5@!\2")
        buf.write("\u01ab\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ab\3")
        buf.write("\2\2\2\u01ad\u01ae\3\2\2\2\u01ae?\3\2\2\2\u01af\u01b0")
        buf.write("\7L\2\2\u01b0\u01b1\5r:\2\u01b1\u01b3\7\21\2\2\u01b2\u01b4")
        buf.write("\5\n\6\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4")
        buf.write("A\3\2\2\2\u01b5\u01b6\7\\\2\2\u01b6\u01b8\7\21\2\2\u01b7")
        buf.write("\u01b9\5\n\6\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2\2\2")
        buf.write("\u01b9C\3\2\2\2\u01ba\u01bb\5\u008eH\2\u01bb\u01bc\7\21")
        buf.write("\2\2\u01bc\u01bd\5\6\4\2\u01bdE\3\2\2\2\u01be\u01bf\7")
        buf.write("^\2\2\u01bf\u01c0\6$\b\2\u01c0\u01c1\5r:\2\u01c1\u01c2")
        buf.write("\5\u0096L\2\u01c2G\3\2\2\2\u01c3\u01c4\7a\2\2\u01c4\u01ca")
        buf.write("\5\b\5\2\u01c5\u01c7\5J&\2\u01c6\u01c8\5L\'\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9")
        buf.write("\u01cb\5L\'\2\u01ca\u01c5\3\2\2\2\u01ca\u01c9\3\2\2\2")
        buf.write("\u01cbI\3\2\2\2\u01cc\u01d2\7P\2\2\u01cd\u01cf\7\t\2\2")
        buf.write("\u01ce\u01d0\5v<\2\u01cf\u01ce\3\2\2\2\u01cf\u01d0\3\2")
        buf.write("\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d3\7\n\2\2\u01d2\u01cd")
        buf.write("\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4")
        buf.write("\u01d5\5\b\5\2\u01d5K\3\2\2\2\u01d6\u01d7\7Q\2\2\u01d7")
        buf.write("\u01d8\5\b\5\2\u01d8M\3\2\2\2\u01d9\u01da\7X\2\2\u01da")
        buf.write("\u01db\5\u0096L\2\u01dbO\3\2\2\2\u01dc\u01de\7k\2\2\u01dd")
        buf.write("\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3\2\2\2")
        buf.write("\u01df\u01e1\7Y\2\2\u01e0\u01e2\7\32\2\2\u01e1\u01e0\3")
        buf.write("\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4")
        buf.write("\5\u008eH\2\u01e4\u01e6\7\t\2\2\u01e5\u01e7\5Z.\2\u01e6")
        buf.write("\u01e5\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8\3\2\2\2")
        buf.write("\u01e8\u01e9\7\n\2\2\u01e9\u01ea\7\13\2\2\u01ea\u01eb")
        buf.write("\5`\61\2\u01eb\u01ec\7\f\2\2\u01ecQ\3\2\2\2\u01ed\u01ee")
        buf.write("\7d\2\2\u01ee\u01ef\5\u008eH\2\u01ef\u01f0\5T+\2\u01f0")
        buf.write("S\3\2\2\2\u01f1\u01f2\7f\2\2\u01f2\u01f4\5t;\2\u01f3\u01f1")
        buf.write("\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5")
        buf.write("\u01f9\7\13\2\2\u01f6\u01f8\5V,\2\u01f7\u01f6\3\2\2\2")
        buf.write("\u01f8\u01fb\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3")
        buf.write("\2\2\2\u01fa\u01fc\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fd")
        buf.write("\7\f\2\2\u01fdU\3\2\2\2\u01fe\u0203\7u\2\2\u01ff\u0200")
        buf.write("\6,\t\2\u0200\u0203\5\u008eH\2\u0201\u0203\7k\2\2\u0202")
        buf.write("\u01fe\3\2\2\2\u0202\u01ff\3\2\2\2\u0202\u0201\3\2\2\2")
        buf.write("\u0203\u0206\3\2\2\2\u0204\u0202\3\2\2\2\u0204\u0205\3")
        buf.write("\2\2\2\u0205\u020d\3\2\2\2\u0206\u0204\3\2\2\2\u0207\u020e")
        buf.write("\5X-\2\u0208\u0209\5v<\2\u0209\u020a\7\17\2\2\u020a\u020b")
        buf.write("\5x=\2\u020b\u020c\7\r\2\2\u020c\u020e\3\2\2\2\u020d\u0207")
        buf.write("\3\2\2\2\u020d\u0208\3\2\2\2\u020e\u0218\3\2\2\2\u020f")
        buf.write("\u0218\5&\24\2\u0210\u0212\7\37\2\2\u0211\u0210\3\2\2")
        buf.write("\2\u0211\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214")
        buf.write("\5l\67\2\u0214\u0215\7\17\2\2\u0215\u0216\5t;\2\u0216")
        buf.write("\u0218\3\2\2\2\u0217\u0204\3\2\2\2\u0217\u020f\3\2\2\2")
        buf.write("\u0217\u0211\3\2\2\2\u0218W\3\2\2\2\u0219\u021b\7\32\2")
        buf.write("\2\u021a\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021d")
        buf.write("\3\2\2\2\u021c\u021e\7\37\2\2\u021d\u021c\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0220\5l\67\2")
        buf.write("\u0220\u0222\7\t\2\2\u0221\u0223\5Z.\2\u0222\u0221\3\2")
        buf.write("\2\2\u0222\u0223\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225")
        buf.write("\7\n\2\2\u0225\u0226\7\13\2\2\u0226\u0227\5`\61\2\u0227")
        buf.write("\u0228\7\f\2\2\u0228\u0247\3\2\2\2\u0229\u022b\7\32\2")
        buf.write("\2\u022a\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022d")
        buf.write("\3\2\2\2\u022c\u022e\7\37\2\2\u022d\u022c\3\2\2\2\u022d")
        buf.write("\u022e\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230\5\u0088")
        buf.write("E\2\u0230\u0231\7\t\2\2\u0231\u0232\7\n\2\2\u0232\u0233")
        buf.write("\7\13\2\2\u0233\u0234\5`\61\2\u0234\u0235\7\f\2\2\u0235")
        buf.write("\u0247\3\2\2\2\u0236\u0238\7\32\2\2\u0237\u0236\3\2\2")
        buf.write("\2\u0237\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u023b")
        buf.write("\7\37\2\2\u023a\u0239\3\2\2\2\u023a\u023b\3\2\2\2\u023b")
        buf.write("\u023c\3\2\2\2\u023c\u023d\5\u008aF\2\u023d\u023f\7\t")
        buf.write("\2\2\u023e\u0240\5Z.\2\u023f\u023e\3\2\2\2\u023f\u0240")
        buf.write("\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\7\n\2\2\u0242")
        buf.write("\u0243\7\13\2\2\u0243\u0244\5`\61\2\u0244\u0245\7\f\2")
        buf.write("\2\u0245\u0247\3\2\2\2\u0246\u021a\3\2\2\2\u0246\u022a")
        buf.write("\3\2\2\2\u0246\u0237\3\2\2\2\u0247Y\3\2\2\2\u0248\u024d")
        buf.write("\5\\/\2\u0249\u024a\7\16\2\2\u024a\u024c\5\\/\2\u024b")
        buf.write("\u0249\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2")
        buf.write("\u024d\u024e\3\2\2\2\u024e\u0252\3\2\2\2\u024f\u024d\3")
        buf.write("\2\2\2\u0250\u0251\7\16\2\2\u0251\u0253\5^\60\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0256\3\2\2\2")
        buf.write("\u0254\u0256\5^\60\2\u0255\u0248\3\2\2\2\u0255\u0254\3")
        buf.write("\2\2\2\u0256[\3\2\2\2\u0257\u025a\5v<\2\u0258\u0259\7")
        buf.write("\17\2\2\u0259\u025b\5t;\2\u025a\u0258\3\2\2\2\u025a\u025b")
        buf.write("\3\2\2\2\u025b]\3\2\2\2\u025c\u025d\7\22\2\2\u025d\u025e")
        buf.write("\5t;\2\u025e_\3\2\2\2\u025f\u0261\5b\62\2\u0260\u025f")
        buf.write("\3\2\2\2\u0260\u0261\3\2\2\2\u0261a\3\2\2\2\u0262\u0264")
        buf.write("\5\4\3\2\u0263\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265")
        buf.write("\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266c\3\2\2\2\u0267")
        buf.write("\u0268\7\7\2\2\u0268\u0269\5f\64\2\u0269\u026a\7\b\2\2")
        buf.write("\u026ae\3\2\2\2\u026b\u026d\7\16\2\2\u026c\u026b\3\2\2")
        buf.write("\2\u026d\u0270\3\2\2\2\u026e\u026c\3\2\2\2\u026e\u026f")
        buf.write("\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2\u0271")
        buf.write("\u0273\5h\65\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u027c\3\2\2\2\u0274\u0276\7\16\2\2\u0275\u0274")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0275\3\2\2\2\u0277")
        buf.write("\u0278\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b\5h\65\2")
        buf.write("\u027a\u0275\3\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a\3")
        buf.write("\2\2\2\u027c\u027d\3\2\2\2\u027d\u0282\3\2\2\2\u027e\u027c")
        buf.write("\3\2\2\2\u027f\u0281\7\16\2\2\u0280\u027f\3\2\2\2\u0281")
        buf.write("\u0284\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2")
        buf.write("\u0283g\3\2\2\2\u0284\u0282\3\2\2\2\u0285\u0287\7\22\2")
        buf.write("\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288\u0289\5t;\2\u0289i\3\2\2\2\u028a\u028b")
        buf.write("\5l\67\2\u028b\u028c\7\21\2\2\u028c\u028d\5t;\2\u028d")
        buf.write("\u02b8\3\2\2\2\u028e\u028f\7\7\2\2\u028f\u0290\5t;\2\u0290")
        buf.write("\u0291\7\b\2\2\u0291\u0292\7\21\2\2\u0292\u0293\5t;\2")
        buf.write("\u0293\u02b8\3\2\2\2\u0294\u0296\7k\2\2\u0295\u0294\3")
        buf.write("\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298\3\2\2\2\u0297\u0299")
        buf.write("\7\32\2\2\u0298\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029b\5l\67\2\u029b\u029d\7\t\2\2")
        buf.write("\u029c\u029e\5Z.\2\u029d\u029c\3\2\2\2\u029d\u029e\3\2")
        buf.write("\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\7\n\2\2\u02a0\u02a1")
        buf.write("\7\13\2\2\u02a1\u02a2\5`\61\2\u02a2\u02a3\7\f\2\2\u02a3")
        buf.write("\u02b8\3\2\2\2\u02a4\u02a5\5\u0088E\2\u02a5\u02a6\7\t")
        buf.write("\2\2\u02a6\u02a7\7\n\2\2\u02a7\u02a8\7\13\2\2\u02a8\u02a9")
        buf.write("\5`\61\2\u02a9\u02aa\7\f\2\2\u02aa\u02b8\3\2\2\2\u02ab")
        buf.write("\u02ac\5\u008aF\2\u02ac\u02ad\7\t\2\2\u02ad\u02ae\5\\")
        buf.write("/\2\u02ae\u02af\7\n\2\2\u02af\u02b0\7\13\2\2\u02b0\u02b1")
        buf.write("\5`\61\2\u02b1\u02b2\7\f\2\2\u02b2\u02b8\3\2\2\2\u02b3")
        buf.write("\u02b5\7\22\2\2\u02b4\u02b3\3\2\2\2\u02b4\u02b5\3\2\2")
        buf.write("\2\u02b5\u02b6\3\2\2\2\u02b6\u02b8\5t;\2\u02b7\u028a\3")
        buf.write("\2\2\2\u02b7\u028e\3\2\2\2\u02b7\u0295\3\2\2\2\u02b7\u02a4")
        buf.write("\3\2\2\2\u02b7\u02ab\3\2\2\2\u02b7\u02b4\3\2\2\2\u02b8")
        buf.write("k\3\2\2\2\u02b9\u02c1\5\u008cG\2\u02ba\u02c1\7x\2\2\u02bb")
        buf.write("\u02c1\5\u0084C\2\u02bc\u02bd\7\7\2\2\u02bd\u02be\5t;")
        buf.write("\2\u02be\u02bf\7\b\2\2\u02bf\u02c1\3\2\2\2\u02c0\u02b9")
        buf.write("\3\2\2\2\u02c0\u02ba\3\2\2\2\u02c0\u02bb\3\2\2\2\u02c0")
        buf.write("\u02bc\3\2\2\2\u02c1m\3\2\2\2\u02c2\u02ce\7\t\2\2\u02c3")
        buf.write("\u02c8\5p9\2\u02c4\u02c5\7\16\2\2\u02c5\u02c7\5p9\2\u02c6")
        buf.write("\u02c4\3\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2")
        buf.write("\u02c8\u02c9\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3")
        buf.write("\2\2\2\u02cb\u02cd\7\16\2\2\u02cc\u02cb\3\2\2\2\u02cc")
        buf.write("\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce\u02c3\3\2\2\2")
        buf.write("\u02ce\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\7")
        buf.write("\n\2\2\u02d1o\3\2\2\2\u02d2\u02d4\7\22\2\2\u02d3\u02d2")
        buf.write("\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5")
        buf.write("\u02d8\5t;\2\u02d6\u02d8\5\u008eH\2\u02d7\u02d5\3\2\2")
        buf.write("\2\u02d7\u02d6\3\2\2\2\u02d8q\3\2\2\2\u02d9\u02de\5t;")
        buf.write("\2\u02da\u02db\7\16\2\2\u02db\u02dd\5t;\2\u02dc\u02da")
        buf.write("\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de\u02dc\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02dfs\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1")
        buf.write("\u02e2\b;\1\2\u02e2\u0315\5z>\2\u02e3\u02e5\7d\2\2\u02e4")
        buf.write("\u02e6\5\u008eH\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2")
        buf.write("\2\2\u02e6\u02e7\3\2\2\2\u02e7\u0315\5T+\2\u02e8\u02e9")
        buf.write("\7N\2\2\u02e9\u02eb\5t;\2\u02ea\u02ec\5n8\2\u02eb\u02ea")
        buf.write("\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u0315\3\2\2\2\u02ed")
        buf.write("\u02ee\7N\2\2\u02ee\u02ef\7\23\2\2\u02ef\u0315\5\u008e")
        buf.write("H\2\u02f0\u02f1\7_\2\2\u02f1\u0315\5t;\'\u02f2\u02f3\7")
        buf.write("S\2\2\u02f3\u0315\5t;&\u02f4\u02f5\7K\2\2\u02f5\u0315")
        buf.write("\5t;%\u02f6\u02f7\7\24\2\2\u02f7\u0315\5t;$\u02f8\u02f9")
        buf.write("\7\25\2\2\u02f9\u0315\5t;#\u02fa\u02fb\7\26\2\2\u02fb")
        buf.write("\u0315\5t;\"\u02fc\u02fd\7\27\2\2\u02fd\u0315\5t;!\u02fe")
        buf.write("\u02ff\7\30\2\2\u02ff\u0315\5t; \u0300\u0301\7\31\2\2")
        buf.write("\u0301\u0315\5t;\37\u0302\u0303\7l\2\2\u0303\u0315\5t")
        buf.write(";\36\u0304\u0305\7j\2\2\u0305\u0306\7\t\2\2\u0306\u0307")
        buf.write("\5t;\2\u0307\u0308\7\n\2\2\u0308\u0315\3\2\2\2\u0309\u0315")
        buf.write("\5\66\34\2\u030a\u0315\7Z\2\2\u030b\u0315\5\u008eH\2\u030c")
        buf.write("\u0315\7g\2\2\u030d\u0315\5\u0082B\2\u030e\u0315\5d\63")
        buf.write("\2\u030f\u0315\5x=\2\u0310\u0311\7\t\2\2\u0311\u0312\5")
        buf.write("r:\2\u0312\u0313\7\n\2\2\u0313\u0315\3\2\2\2\u0314\u02e1")
        buf.write("\3\2\2\2\u0314\u02e3\3\2\2\2\u0314\u02e8\3\2\2\2\u0314")
        buf.write("\u02ed\3\2\2\2\u0314\u02f0\3\2\2\2\u0314\u02f2\3\2\2\2")
        buf.write("\u0314\u02f4\3\2\2\2\u0314\u02f6\3\2\2\2\u0314\u02f8\3")
        buf.write("\2\2\2\u0314\u02fa\3\2\2\2\u0314\u02fc\3\2\2\2\u0314\u02fe")
        buf.write("\3\2\2\2\u0314\u0300\3\2\2\2\u0314\u0302\3\2\2\2\u0314")
        buf.write("\u0304\3\2\2\2\u0314\u0309\3\2\2\2\u0314\u030a\3\2\2\2")
        buf.write("\u0314\u030b\3\2\2\2\u0314\u030c\3\2\2\2\u0314\u030d\3")
        buf.write("\2\2\2\u0314\u030e\3\2\2\2\u0314\u030f\3\2\2\2\u0314\u0310")
        buf.write("\3\2\2\2\u0315\u0367\3\2\2\2\u0316\u0317\f\35\2\2\u0317")
        buf.write("\u0318\7\35\2\2\u0318\u0366\5t;\35\u0319\u031a\f\34\2")
        buf.write("\2\u031a\u031b\t\2\2\2\u031b\u0366\5t;\35\u031c\u031d")
        buf.write("\f\33\2\2\u031d\u031e\t\3\2\2\u031e\u0366\5t;\34\u031f")
        buf.write("\u0320\f\32\2\2\u0320\u0321\7\36\2\2\u0321\u0366\5t;\33")
        buf.write("\u0322\u0323\f\31\2\2\u0323\u0324\t\4\2\2\u0324\u0366")
        buf.write("\5t;\32\u0325\u0326\f\30\2\2\u0326\u0327\t\5\2\2\u0327")
        buf.write("\u0366\5t;\31\u0328\u0329\f\27\2\2\u0329\u032a\7J\2\2")
        buf.write("\u032a\u0366\5t;\30\u032b\u032c\f\26\2\2\u032c\u032d\7")
        buf.write("`\2\2\u032d\u0366\5t;\27\u032e\u032f\f\25\2\2\u032f\u0330")
        buf.write("\t\6\2\2\u0330\u0366\5t;\26\u0331\u0332\f\24\2\2\u0332")
        buf.write("\u0333\7+\2\2\u0333\u0366\5t;\25\u0334\u0335\f\23\2\2")
        buf.write("\u0335\u0336\7,\2\2\u0336\u0366\5t;\24\u0337\u0338\f\22")
        buf.write("\2\2\u0338\u0339\7-\2\2\u0339\u0366\5t;\23\u033a\u033b")
        buf.write("\f\21\2\2\u033b\u033c\7.\2\2\u033c\u0366\5t;\22\u033d")
        buf.write("\u033e\f\20\2\2\u033e\u033f\7/\2\2\u033f\u0366\5t;\21")
        buf.write("\u0340\u0341\f\17\2\2\u0341\u0342\7\20\2\2\u0342\u0343")
        buf.write("\5t;\2\u0343\u0344\7\21\2\2\u0344\u0345\5t;\20\u0345\u0366")
        buf.write("\3\2\2\2\u0346\u0347\f\16\2\2\u0347\u0348\7\17\2\2\u0348")
        buf.write("\u0366\5t;\16\u0349\u034a\f\r\2\2\u034a\u034b\5\u0080")
        buf.write("A\2\u034b\u034c\5t;\r\u034c\u0366\3\2\2\2\u034d\u034e")
        buf.write("\f.\2\2\u034e\u034f\7\7\2\2\u034f\u0350\5r:\2\u0350\u0351")
        buf.write("\7\b\2\2\u0351\u0366\3\2\2\2\u0352\u0354\f-\2\2\u0353")
        buf.write("\u0355\7\20\2\2\u0354\u0353\3\2\2\2\u0354\u0355\3\2\2")
        buf.write("\2\u0355\u0356\3\2\2\2\u0356\u0358\7\23\2\2\u0357\u0359")
        buf.write("\7\37\2\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359")
        buf.write("\u035a\3\2\2\2\u035a\u0366\5\u008cG\2\u035b\u035c\f,\2")
        buf.write("\2\u035c\u0366\5n8\2\u035d\u035e\f)\2\2\u035e\u035f\6")
        buf.write(";\37\2\u035f\u0366\7\24\2\2\u0360\u0361\f(\2\2\u0361\u0362")
        buf.write("\6;!\2\u0362\u0366\7\25\2\2\u0363\u0364\f\13\2\2\u0364")
        buf.write("\u0366\7y\2\2\u0365\u0316\3\2\2\2\u0365\u0319\3\2\2\2")
        buf.write("\u0365\u031c\3\2\2\2\u0365\u031f\3\2\2\2\u0365\u0322\3")
        buf.write("\2\2\2\u0365\u0325\3\2\2\2\u0365\u0328\3\2\2\2\u0365\u032b")
        buf.write("\3\2\2\2\u0365\u032e\3\2\2\2\u0365\u0331\3\2\2\2\u0365")
        buf.write("\u0334\3\2\2\2\u0365\u0337\3\2\2\2\u0365\u033a\3\2\2\2")
        buf.write("\u0365\u033d\3\2\2\2\u0365\u0340\3\2\2\2\u0365\u0346\3")
        buf.write("\2\2\2\u0365\u0349\3\2\2\2\u0365\u034d\3\2\2\2\u0365\u0352")
        buf.write("\3\2\2\2\u0365\u035b\3\2\2\2\u0365\u035d\3\2\2\2\u0365")
        buf.write("\u0360\3\2\2\2\u0365\u0363\3\2\2\2\u0366\u0369\3\2\2\2")
        buf.write("\u0367\u0365\3\2\2\2\u0367\u0368\3\2\2\2\u0368u\3\2\2")
        buf.write("\2\u0369\u0367\3\2\2\2\u036a\u036e\5\u008eH\2\u036b\u036e")
        buf.write("\5d\63\2\u036c\u036e\5x=\2\u036d\u036a\3\2\2\2\u036d\u036b")
        buf.write("\3\2\2\2\u036d\u036c\3\2\2\2\u036ew\3\2\2\2\u036f\u0378")
        buf.write("\7\13\2\2\u0370\u0375\5j\66\2\u0371\u0372\7\16\2\2\u0372")
        buf.write("\u0374\5j\66\2\u0373\u0371\3\2\2\2\u0374\u0377\3\2\2\2")
        buf.write("\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0379\3")
        buf.write("\2\2\2\u0377\u0375\3\2\2\2\u0378\u0370\3\2\2\2\u0378\u0379")
        buf.write("\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u037c\7\16\2\2\u037b")
        buf.write("\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u037e\7\f\2\2\u037ey\3\2\2\2\u037f\u0398\5P)\2")
        buf.write("\u0380\u0382\7k\2\2\u0381\u0380\3\2\2\2\u0381\u0382\3")
        buf.write("\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385\7Y\2\2\u0384\u0386")
        buf.write("\7\32\2\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u0389\7\t\2\2\u0388\u038a\5Z.\2\u0389")
        buf.write("\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\3\2\2\2")
        buf.write("\u038b\u038c\7\n\2\2\u038c\u038d\7\13\2\2\u038d\u038e")
        buf.write("\5`\61\2\u038e\u038f\7\f\2\2\u038f\u0398\3\2\2\2\u0390")
        buf.write("\u0392\7k\2\2\u0391\u0390\3\2\2\2\u0391\u0392\3\2\2\2")
        buf.write("\u0392\u0393\3\2\2\2\u0393\u0394\5|?\2\u0394\u0395\7<")
        buf.write("\2\2\u0395\u0396\5~@\2\u0396\u0398\3\2\2\2\u0397\u037f")
        buf.write("\3\2\2\2\u0397\u0381\3\2\2\2\u0397\u0391\3\2\2\2\u0398")
        buf.write("{\3\2\2\2\u0399\u03a0\5\u008eH\2\u039a\u039c\7\t\2\2\u039b")
        buf.write("\u039d\5Z.\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u03a0\7\n\2\2\u039f\u0399\3\2\2\2")
        buf.write("\u039f\u039a\3\2\2\2\u03a0}\3\2\2\2\u03a1\u03a7\5t;\2")
        buf.write("\u03a2\u03a3\7\13\2\2\u03a3\u03a4\5`\61\2\u03a4\u03a5")
        buf.write("\7\f\2\2\u03a5\u03a7\3\2\2\2\u03a6\u03a1\3\2\2\2\u03a6")
        buf.write("\u03a2\3\2\2\2\u03a7\177\3\2\2\2\u03a8\u03a9\t\7\2\2\u03a9")
        buf.write("\u0081\3\2\2\2\u03aa\u03b2\7=\2\2\u03ab\u03b2\7>\2\2\u03ac")
        buf.write("\u03b2\7x\2\2\u03ad\u03b2\7y\2\2\u03ae\u03b2\7\6\2\2\u03af")
        buf.write("\u03b2\5\u0084C\2\u03b0\u03b2\5\u0086D\2\u03b1\u03aa\3")
        buf.write("\2\2\2\u03b1\u03ab\3\2\2\2\u03b1\u03ac\3\2\2\2\u03b1\u03ad")
        buf.write("\3\2\2\2\u03b1\u03ae\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1")
        buf.write("\u03b0\3\2\2\2\u03b2\u0083\3\2\2\2\u03b3\u03b4\t\b\2\2")
        buf.write("\u03b4\u0085\3\2\2\2\u03b5\u03b6\t\t\2\2\u03b6\u0087\3")
        buf.write("\2\2\2\u03b7\u03b8\6E#\2\u03b8\u03b9\5\u008eH\2\u03b9")
        buf.write("\u03ba\5l\67\2\u03ba\u0089\3\2\2\2\u03bb\u03bc\6F$\2\u03bc")
        buf.write("\u03bd\5\u008eH\2\u03bd\u03be\5l\67\2\u03be\u008b\3\2")
        buf.write("\2\2\u03bf\u03c2\5\u008eH\2\u03c0\u03c2\5\u0090I\2\u03c1")
        buf.write("\u03bf\3\2\2\2\u03c1\u03c0\3\2\2\2\u03c2\u008d\3\2\2\2")
        buf.write("\u03c3\u03c4\t\n\2\2\u03c4\u008f\3\2\2\2\u03c5\u03c9\5")
        buf.write("\u0092J\2\u03c6\u03c9\7=\2\2\u03c7\u03c9\7>\2\2\u03c8")
        buf.write("\u03c5\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c7\3\2\2\2")
        buf.write("\u03c9\u0091\3\2\2\2\u03ca\u03f9\7H\2\2\u03cb\u03f9\7")
        buf.write("I\2\2\u03cc\u03f9\7J\2\2\u03cd\u03f9\7K\2\2\u03ce\u03f9")
        buf.write("\7L\2\2\u03cf\u03f9\7M\2\2\u03d0\u03f9\7N\2\2\u03d1\u03f9")
        buf.write("\7O\2\2\u03d2\u03f9\7P\2\2\u03d3\u03f9\7Q\2\2\u03d4\u03f9")
        buf.write("\7R\2\2\u03d5\u03f9\7S\2\2\u03d6\u03f9\7T\2\2\u03d7\u03f9")
        buf.write("\7U\2\2\u03d8\u03f9\7V\2\2\u03d9\u03f9\7W\2\2\u03da\u03f9")
        buf.write("\7X\2\2\u03db\u03f9\7Y\2\2\u03dc\u03f9\7Z\2\2\u03dd\u03f9")
        buf.write("\7[\2\2\u03de\u03f9\7\\\2\2\u03df\u03f9\7]\2\2\u03e0\u03f9")
        buf.write("\7^\2\2\u03e1\u03f9\7_\2\2\u03e2\u03f9\7`\2\2\u03e3\u03f9")
        buf.write("\7a\2\2\u03e4\u03f9\7d\2\2\u03e5\u03f9\7e\2\2\u03e6\u03f9")
        buf.write("\7f\2\2\u03e7\u03f9\7g\2\2\u03e8\u03f9\7h\2\2\u03e9\u03f9")
        buf.write("\7i\2\2\u03ea\u03f9\7j\2\2\u03eb\u03f9\7m\2\2\u03ec\u03f9")
        buf.write("\5\u0094K\2\u03ed\u03f9\7p\2\2\u03ee\u03f9\7q\2\2\u03ef")
        buf.write("\u03f9\7r\2\2\u03f0\u03f9\7s\2\2\u03f1\u03f9\7t\2\2\u03f2")
        buf.write("\u03f9\7u\2\2\u03f3\u03f9\7v\2\2\u03f4\u03f9\7k\2\2\u03f5")
        buf.write("\u03f9\7l\2\2\u03f6\u03f9\7c\2\2\u03f7\u03f9\7b\2\2\u03f8")
        buf.write("\u03ca\3\2\2\2\u03f8\u03cb\3\2\2\2\u03f8\u03cc\3\2\2\2")
        buf.write("\u03f8\u03cd\3\2\2\2\u03f8\u03ce\3\2\2\2\u03f8\u03cf\3")
        buf.write("\2\2\2\u03f8\u03d0\3\2\2\2\u03f8\u03d1\3\2\2\2\u03f8\u03d2")
        buf.write("\3\2\2\2\u03f8\u03d3\3\2\2\2\u03f8\u03d4\3\2\2\2\u03f8")
        buf.write("\u03d5\3\2\2\2\u03f8\u03d6\3\2\2\2\u03f8\u03d7\3\2\2\2")
        buf.write("\u03f8\u03d8\3\2\2\2\u03f8\u03d9\3\2\2\2\u03f8\u03da\3")
        buf.write("\2\2\2\u03f8\u03db\3\2\2\2\u03f8\u03dc\3\2\2\2\u03f8\u03dd")
        buf.write("\3\2\2\2\u03f8\u03de\3\2\2\2\u03f8\u03df\3\2\2\2\u03f8")
        buf.write("\u03e0\3\2\2\2\u03f8\u03e1\3\2\2\2\u03f8\u03e2\3\2\2\2")
        buf.write("\u03f8\u03e3\3\2\2\2\u03f8\u03e4\3\2\2\2\u03f8\u03e5\3")
        buf.write("\2\2\2\u03f8\u03e6\3\2\2\2\u03f8\u03e7\3\2\2\2\u03f8\u03e8")
        buf.write("\3\2\2\2\u03f8\u03e9\3\2\2\2\u03f8\u03ea\3\2\2\2\u03f8")
        buf.write("\u03eb\3\2\2\2\u03f8\u03ec\3\2\2\2\u03f8\u03ed\3\2\2\2")
        buf.write("\u03f8\u03ee\3\2\2\2\u03f8\u03ef\3\2\2\2\u03f8\u03f0\3")
        buf.write("\2\2\2\u03f8\u03f1\3\2\2\2\u03f8\u03f2\3\2\2\2\u03f8\u03f3")
        buf.write("\3\2\2\2\u03f8\u03f4\3\2\2\2\u03f8\u03f5\3\2\2\2\u03f8")
        buf.write("\u03f6\3\2\2\2\u03f8\u03f7\3\2\2\2\u03f9\u0093\3\2\2\2")
        buf.write("\u03fa\u03fb\t\13\2\2\u03fb\u0095\3\2\2\2\u03fc\u0401")
        buf.write("\7\r\2\2\u03fd\u0401\7\2\2\3\u03fe\u0401\6L%\2\u03ff\u0401")
        buf.write("\6L&\2\u0400\u03fc\3\2\2\2\u0400\u03fd\3\2\2\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0400\u03ff\3\2\2\2\u0401\u0097\3\2\2\2q\u0099")
        buf.write("\u009c\u00b6\u00ba\u00c1\u00c7\u00cb\u00d2\u00da\u00df")
        buf.write("\u00e1\u00ea\u00ee\u00f6\u00fb\u0104\u010c\u0110\u0115")
        buf.write("\u0120\u0126\u0135\u0149\u014d\u0151\u0159\u0162\u0167")
        buf.write("\u016f\u0174\u0179\u0180\u0187\u018e\u01a0\u01a4\u01a6")
        buf.write("\u01ad\u01b3\u01b8\u01c7\u01ca\u01cf\u01d2\u01dd\u01e1")
        buf.write("\u01e6\u01f3\u01f9\u0202\u0204\u020d\u0211\u0217\u021a")
        buf.write("\u021d\u0222\u022a\u022d\u0237\u023a\u023f\u0246\u024d")
        buf.write("\u0252\u0255\u025a\u0260\u0265\u026e\u0272\u0277\u027c")
        buf.write("\u0282\u0286\u0295\u0298\u029d\u02b4\u02b7\u02c0\u02c8")
        buf.write("\u02cc\u02ce\u02d3\u02d7\u02de\u02e5\u02eb\u0314\u0354")
        buf.write("\u0358\u0365\u0367\u036d\u0375\u0378\u037b\u0381\u0385")
        buf.write("\u0389\u0391\u0397\u039c\u039f\u03a6\u03b1\u03c1\u03c8")
        buf.write("\u03f8\u0400")
        return buf.getvalue()


class JavaScriptParser(JavaScriptParserBase):
    grammarFileName = "JavaScriptParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "'['", "']'", "'('", "')'", "'{'", "'}'",
                    "';'", "','", "'='", "'?'", "':'", "'...'", "'.'",
                    "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'",
                    "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'",
                    "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='",
                    "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'",
                    "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='",
                    "'>>>='", "'&='", "'^='", "'|='", "'**='", "'=>'",
                    "'null'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "'break'", "'do'", "'instanceof'",
                    "'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'",
                    "'finally'", "'return'", "'void'", "'continue'", "'for'",
                    "'switch'", "'while'", "'debugger'", "'function'",
                    "'this'", "'with'", "'default'", "'if'", "'throw'",
                    "'delete'", "'in'", "'try'", "'as'", "'from'", "'class'",
                    "'enum'", "'extends'", "'super'", "'const'", "'export'",
                    "'import'", "'async'", "'await'", "'implements'", "<INVALID>",
                    "<INVALID>", "'private'", "'public'", "'interface'",
                    "'package'", "'protected'", "'static'", "'yield'"]

    symbolicNames = ["<INVALID>", "HashBangLine", "MultiLineComment", "SingleLineComment",
                     "RegularExpressionLiteral", "OpenBracket", "CloseBracket",
                     "OpenParen", "CloseParen", "OpenBrace", "CloseBrace",
                     "SemiColon", "Comma", "Assign", "QuestionMark", "Colon",
                     "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus",
                     "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus",
                     "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic",
                     "LeftShiftArithmetic", "RightShiftLogical", "LessThan",
                     "MoreThan", "LessThanEquals", "GreaterThanEquals",
                     "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals",
                     "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign",
                     "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign",
                     "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign",
                     "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign",
                     "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral",
                     "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral",
                     "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral",
                     "BigHexIntegerLiteral", "BigOctalIntegerLiteral",
                     "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral",
                     "Break", "Do", "Instanceof", "Typeof", "Case", "Else",
                     "New", "Var", "Catch", "Finally", "Return", "Void",
                     "Continue", "For", "Switch", "While", "Debugger",
                     "Function", "This", "With", "Default", "If", "Throw",
                     "Delete", "In", "Try", "As", "From", "Class", "Enum",
                     "Extends", "Super", "Const", "Export", "Import", "Async",
                     "Await", "Implements", "StrictLet", "NonStrictLet",
                     "Private", "Public", "Interface", "Package", "Protected",
                     "Static", "Yield", "Identifier", "StringLiteral",
                     "TemplateStringLiteral", "WhiteSpaces", "LineTerminator",
                     "HtmlComment", "CDataComment", "UnexpectedCharacter"]

    RULE_program = 0
    RULE_sourceElement = 1
    RULE_statement = 2
    RULE_block = 3
    RULE_statementList = 4
    RULE_importStatement = 5
    RULE_importFromBlock = 6
    RULE_moduleItems = 7
    RULE_importDefault = 8
    RULE_importNamespace = 9
    RULE_importFrom = 10
    RULE_aliasName = 11
    RULE_exportStatement = 12
    RULE_exportFromBlock = 13
    RULE_declaration = 14
    RULE_variableStatement = 15
    RULE_variableDeclarationList = 16
    RULE_variableDeclaration = 17
    RULE_emptyStatement = 18
    RULE_expressionStatement = 19
    RULE_ifStatement = 20
    RULE_iterationStatement = 21
    RULE_varModifier = 22
    RULE_continueStatement = 23
    RULE_breakStatement = 24
    RULE_returnStatement = 25
    RULE_yieldStatement = 26
    RULE_withStatement = 27
    RULE_switchStatement = 28
    RULE_caseBlock = 29
    RULE_caseClauses = 30
    RULE_caseClause = 31
    RULE_defaultClause = 32
    RULE_labelledStatement = 33
    RULE_throwStatement = 34
    RULE_tryStatement = 35
    RULE_catchProduction = 36
    RULE_finallyProduction = 37
    RULE_debuggerStatement = 38
    RULE_functionDeclaration = 39
    RULE_classDeclaration = 40
    RULE_classTail = 41
    RULE_classElement = 42
    RULE_methodDefinition = 43
    RULE_formalParameterList = 44
    RULE_formalParameterArg = 45
    RULE_lastFormalParameterArg = 46
    RULE_functionBody = 47
    RULE_sourceElements = 48
    RULE_arrayLiteral = 49
    RULE_elementList = 50
    RULE_arrayElement = 51
    RULE_propertyAssignment = 52
    RULE_propertyName = 53
    RULE_arguments = 54
    RULE_argument = 55
    RULE_expressionSequence = 56
    RULE_singleExpression = 57
    RULE_assignable = 58
    RULE_objectLiteral = 59
    RULE_anoymousFunction = 60
    RULE_arrowFunctionParameters = 61
    RULE_arrowFunctionBody = 62
    RULE_assignmentOperator = 63
    RULE_literal = 64
    RULE_numericLiteral = 65
    RULE_bigintLiteral = 66
    RULE_getter = 67
    RULE_setter = 68
    RULE_identifierName = 69
    RULE_identifier = 70
    RULE_reservedWord = 71
    RULE_keyword = 72
    RULE_let = 73
    RULE_eos = 74

    ruleNames = ["program", "sourceElement", "statement", "block", "statementList",
                 "importStatement", "importFromBlock", "moduleItems",
                 "importDefault", "importNamespace", "importFrom", "aliasName",
                 "exportStatement", "exportFromBlock", "declaration",
                 "variableStatement", "variableDeclarationList", "variableDeclaration",
                 "emptyStatement", "expressionStatement", "ifStatement",
                 "iterationStatement", "varModifier", "continueStatement",
                 "breakStatement", "returnStatement", "yieldStatement",
                 "withStatement", "switchStatement", "caseBlock", "caseClauses",
                 "caseClause", "defaultClause", "labelledStatement", "throwStatement",
                 "tryStatement", "catchProduction", "finallyProduction",
                 "debuggerStatement", "functionDeclaration", "classDeclaration",
                 "classTail", "classElement", "methodDefinition", "formalParameterList",
                 "formalParameterArg", "lastFormalParameterArg", "functionBody",
                 "sourceElements", "arrayLiteral", "elementList", "arrayElement",
                 "propertyAssignment", "propertyName", "arguments", "argument",
                 "expressionSequence", "singleExpression", "assignable",
                 "objectLiteral", "anoymousFunction", "arrowFunctionParameters",
                 "arrowFunctionBody", "assignmentOperator", "literal",
                 "numericLiteral", "bigintLiteral", "getter", "setter",
                 "identifierName", "identifier", "reservedWord", "keyword",
                 "let", "eos"]

    EOF = Token.EOF
    HashBangLine = 1
    MultiLineComment = 2
    SingleLineComment = 3
    RegularExpressionLiteral = 4
    OpenBracket = 5
    CloseBracket = 6
    OpenParen = 7
    CloseParen = 8
    OpenBrace = 9
    CloseBrace = 10
    SemiColon = 11
    Comma = 12
    Assign = 13
    QuestionMark = 14
    Colon = 15
    Ellipsis = 16
    Dot = 17
    PlusPlus = 18
    MinusMinus = 19
    Plus = 20
    Minus = 21
    BitNot = 22
    Not = 23
    Multiply = 24
    Divide = 25
    Modulus = 26
    Power = 27
    NullCoalesce = 28
    Hashtag = 29
    RightShiftArithmetic = 30
    LeftShiftArithmetic = 31
    RightShiftLogical = 32
    LessThan = 33
    MoreThan = 34
    LessThanEquals = 35
    GreaterThanEquals = 36
    Equals_ = 37
    NotEquals = 38
    IdentityEquals = 39
    IdentityNotEquals = 40
    BitAnd = 41
    BitXOr = 42
    BitOr = 43
    And = 44
    Or = 45
    MultiplyAssign = 46
    DivideAssign = 47
    ModulusAssign = 48
    PlusAssign = 49
    MinusAssign = 50
    LeftShiftArithmeticAssign = 51
    RightShiftArithmeticAssign = 52
    RightShiftLogicalAssign = 53
    BitAndAssign = 54
    BitXorAssign = 55
    BitOrAssign = 56
    PowerAssign = 57
    ARROW = 58
    NullLiteral = 59
    BooleanLiteral = 60
    DecimalLiteral = 61
    HexIntegerLiteral = 62
    OctalIntegerLiteral = 63
    OctalIntegerLiteral2 = 64
    BinaryIntegerLiteral = 65
    BigHexIntegerLiteral = 66
    BigOctalIntegerLiteral = 67
    BigBinaryIntegerLiteral = 68
    BigDecimalIntegerLiteral = 69
    Break = 70
    Do = 71
    Instanceof = 72
    Typeof = 73
    Case = 74
    Else = 75
    New = 76
    Var = 77
    Catch = 78
    Finally = 79
    Return = 80
    Void = 81
    Continue = 82
    For = 83
    Switch = 84
    While = 85
    Debugger = 86
    Function = 87
    This = 88
    With = 89
    Default = 90
    If = 91
    Throw = 92
    Delete = 93
    In = 94
    Try = 95
    As = 96
    From = 97
    Class = 98
    Enum = 99
    Extends = 100
    Super = 101
    Const = 102
    Export = 103
    Import = 104
    Async = 105
    Await = 106
    Implements = 107
    StrictLet = 108
    NonStrictLet = 109
    Private = 110
    Public = 111
    Interface = 112
    Package = 113
    Protected = 114
    Static = 115
    Yield = 116
    Identifier = 117
    StringLiteral = 118
    TemplateStringLiteral = 119
    WhiteSpaces = 120
    LineTerminator = 121
    HtmlComment = 122
    CDataComment = 123
    UnexpectedCharacter = 124

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaScriptParser.EOF, 0)

        def HashBangLine(self):
            return self.getToken(JavaScriptParser.HashBangLine, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(JavaScriptParser.SourceElementsContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_program

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgram"):
                listener.enterProgram(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgram"):
                listener.exitProgram(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProgram"):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)

    def program(self):
        localctx = JavaScriptParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.state = 150
                self.match(JavaScriptParser.HashBangLine)

            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.state = 153
                self.sourceElements()

            self.state = 156
            self.match(JavaScriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceElementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_sourceElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourceElement"):
                listener.enterSourceElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourceElement"):
                listener.exitSourceElement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourceElement"):
                return visitor.visitSourceElement(self)
            else:
                return visitor.visitChildren(self)

    def sourceElement(self):

        localctx = JavaScriptParser.SourceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sourceElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext, 0)

        def variableStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableStatementContext, 0)

        def importStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportStatementContext, 0)

        def exportStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ExportStatementContext, 0)

        def emptyStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.EmptyStatementContext, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassDeclarationContext, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionStatementContext, 0)

        def ifStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.IfStatementContext, 0)

        def iterationStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.IterationStatementContext, 0)

        def continueStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ContinueStatementContext, 0)

        def breakStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.BreakStatementContext, 0)

        def returnStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ReturnStatementContext, 0)

        def yieldStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.YieldStatementContext, 0)

        def withStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.WithStatementContext, 0)

        def labelledStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.LabelledStatementContext, 0)

        def switchStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.SwitchStatementContext, 0)

        def throwStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.ThrowStatementContext, 0)

        def tryStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.TryStatementContext, 0)

        def debuggerStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.DebuggerStatementContext, 0)

        def functionDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionDeclarationContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = JavaScriptParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 160
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 161
                self.variableStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 162
                self.importStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 163
                self.exportStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 164
                self.emptyStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 165
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 166
                self.expressionStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 167
                self.ifStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 168
                self.iterationStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 169
                self.continueStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 170
                self.breakStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 171
                self.returnStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 172
                self.yieldStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 173
                self.withStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 174
                self.labelledStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 175
                self.switchStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 176
                self.throwStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 177
                self.tryStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 178
                self.debuggerStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 179
                self.functionDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementList(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementListContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)

    def block(self):

        localctx = JavaScriptParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(JavaScriptParser.OpenBrace)
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.state = 183
                self.statementList()

            self.state = 186
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.StatementContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_statementList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementList"):
                listener.enterStatementList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementList"):
                listener.exitStatementList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatementList"):
                return visitor.visitStatementList(self)
            else:
                return visitor.visitChildren(self)

    def statementList(self):

        localctx = JavaScriptParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 188
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 191
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStatementContext(ParserRuleContext):
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(JavaScriptParser.Import, 0)

        def importFromBlock(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportFromBlockContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportStatement"):
                listener.enterImportStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportStatement"):
                listener.exitImportStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportStatement"):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)

    def importStatement(self):

        localctx = JavaScriptParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.match(JavaScriptParser.Import)
            self.state = 194
            self.importFromBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportFromBlockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importFrom(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportFromContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def importNamespace(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportNamespaceContext, 0)

        def moduleItems(self):
            return self.getTypedRuleContext(JavaScriptParser.ModuleItemsContext, 0)

        def importDefault(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportDefaultContext, 0)

        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importFromBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportFromBlock"):
                listener.enterImportFromBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportFromBlock"):
                listener.exitImportFromBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportFromBlock"):
                return visitor.visitImportFromBlock(self)
            else:
                return visitor.visitChildren(self)

    def importFromBlock(self):

        localctx = JavaScriptParser.ImportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importFromBlock)
        try:
            self.state = 208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.OpenBrace, JavaScriptParser.Multiply, JavaScriptParser.NullLiteral,
                         JavaScriptParser.BooleanLiteral, JavaScriptParser.Break, JavaScriptParser.Do,
                         JavaScriptParser.Instanceof, JavaScriptParser.Typeof, JavaScriptParser.Case,
                         JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch,
                         JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void,
                         JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch,
                         JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function,
                         JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If,
                         JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try,
                         JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum,
                         JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const,
                         JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async,
                         JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet,
                         JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public,
                         JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected,
                         JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
                if la_ == 1:
                    self.state = 196
                    self.importDefault()

                self.state = 201
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaScriptParser.Multiply, JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral,
                             JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof,
                             JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else,
                             JavaScriptParser.New, JavaScriptParser.Var, JavaScriptParser.Catch,
                             JavaScriptParser.Finally, JavaScriptParser.Return, JavaScriptParser.Void,
                             JavaScriptParser.Continue, JavaScriptParser.For, JavaScriptParser.Switch,
                             JavaScriptParser.While, JavaScriptParser.Debugger, JavaScriptParser.Function,
                             JavaScriptParser.This, JavaScriptParser.With, JavaScriptParser.Default,
                             JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete, JavaScriptParser.In,
                             JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From, JavaScriptParser.Class,
                             JavaScriptParser.Enum, JavaScriptParser.Extends, JavaScriptParser.Super,
                             JavaScriptParser.Const, JavaScriptParser.Export, JavaScriptParser.Import,
                             JavaScriptParser.Async, JavaScriptParser.Await, JavaScriptParser.Implements,
                             JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet, JavaScriptParser.Private,
                             JavaScriptParser.Public, JavaScriptParser.Interface, JavaScriptParser.Package,
                             JavaScriptParser.Protected, JavaScriptParser.Static, JavaScriptParser.Yield,
                             JavaScriptParser.Identifier]:
                    self.state = 199
                    self.importNamespace()
                    pass
                elif token in [JavaScriptParser.OpenBrace]:
                    self.state = 200
                    self.moduleItems()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 203
                self.importFrom()
                self.state = 204
                self.eos()
                pass
            elif token in [JavaScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(JavaScriptParser.StringLiteral)
                self.state = 207
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleItemsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.AliasNameContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.AliasNameContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_moduleItems

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuleItems"):
                listener.enterModuleItems(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuleItems"):
                listener.exitModuleItems(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuleItems"):
                return visitor.visitModuleItems(self)
            else:
                return visitor.visitChildren(self)

    def moduleItems(self):

        localctx = JavaScriptParser.ModuleItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleItems)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(JavaScriptParser.OpenBrace)
            self.state = 216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 211
                    self.aliasName()
                    self.state = 212
                    self.match(JavaScriptParser.Comma)
                self.state = 218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & (
                    (1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (
                    1 << (JavaScriptParser.Break - 59)) | (1 << (JavaScriptParser.Do - 59)) | (
                            1 << (JavaScriptParser.Instanceof - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (
                            1 << (JavaScriptParser.Case - 59)) | (1 << (JavaScriptParser.Else - 59)) | (
                            1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Var - 59)) | (
                            1 << (JavaScriptParser.Catch - 59)) | (1 << (JavaScriptParser.Finally - 59)) | (
                            1 << (JavaScriptParser.Return - 59)) | (1 << (JavaScriptParser.Void - 59)) | (
                            1 << (JavaScriptParser.Continue - 59)) | (1 << (JavaScriptParser.For - 59)) | (
                            1 << (JavaScriptParser.Switch - 59)) | (1 << (JavaScriptParser.While - 59)) | (
                            1 << (JavaScriptParser.Debugger - 59)) | (1 << (JavaScriptParser.Function - 59)) | (
                            1 << (JavaScriptParser.This - 59)) | (1 << (JavaScriptParser.With - 59)) | (
                            1 << (JavaScriptParser.Default - 59)) | (1 << (JavaScriptParser.If - 59)) | (
                            1 << (JavaScriptParser.Throw - 59)) | (1 << (JavaScriptParser.Delete - 59)) | (
                            1 << (JavaScriptParser.In - 59)) | (1 << (JavaScriptParser.Try - 59)) | (
                            1 << (JavaScriptParser.As - 59)) | (1 << (JavaScriptParser.From - 59)) | (
                            1 << (JavaScriptParser.Class - 59)) | (1 << (JavaScriptParser.Enum - 59)) | (
                            1 << (JavaScriptParser.Extends - 59)) | (1 << (JavaScriptParser.Super - 59)) | (
                            1 << (JavaScriptParser.Const - 59)) | (1 << (JavaScriptParser.Export - 59)) | (
                            1 << (JavaScriptParser.Import - 59)) | (1 << (JavaScriptParser.Async - 59)) | (
                            1 << (JavaScriptParser.Await - 59)) | (1 << (JavaScriptParser.Implements - 59)) | (
                            1 << (JavaScriptParser.StrictLet - 59)) | (1 << (JavaScriptParser.NonStrictLet - 59)) | (
                            1 << (JavaScriptParser.Private - 59)) | (1 << (JavaScriptParser.Public - 59)) | (
                            1 << (JavaScriptParser.Interface - 59)) | (1 << (JavaScriptParser.Package - 59)) | (
                            1 << (JavaScriptParser.Protected - 59)) | (1 << (JavaScriptParser.Static - 59)) | (
                            1 << (JavaScriptParser.Yield - 59)) | (1 << (JavaScriptParser.Identifier - 59)))) != 0):
                self.state = 219
                self.aliasName()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Comma:
                    self.state = 220
                    self.match(JavaScriptParser.Comma)

            self.state = 225
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasName(self):
            return self.getTypedRuleContext(JavaScriptParser.AliasNameContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importDefault

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportDefault"):
                listener.enterImportDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportDefault"):
                listener.exitImportDefault(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportDefault"):
                return visitor.visitImportDefault(self)
            else:
                return visitor.visitChildren(self)

    def importDefault(self):

        localctx = JavaScriptParser.ImportDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.aliasName()
            self.state = 228
            self.match(JavaScriptParser.Comma)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportNamespaceContext(ParserRuleContext):
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext, i)

        def As(self):
            return self.getToken(JavaScriptParser.As, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importNamespace

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportNamespace"):
                listener.enterImportNamespace(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportNamespace"):
                listener.exitImportNamespace(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportNamespace"):
                return visitor.visitImportNamespace(self)
            else:
                return visitor.visitChildren(self)

    def importNamespace(self):

        localctx = JavaScriptParser.ImportNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importNamespace)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Multiply]:
                self.state = 230
                self.match(JavaScriptParser.Multiply)
                pass
            elif token in [JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break,
                           JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof,
                           JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var,
                           JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return,
                           JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For,
                           JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger,
                           JavaScriptParser.Function, JavaScriptParser.This, JavaScriptParser.With,
                           JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw,
                           JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As,
                           JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum,
                           JavaScriptParser.Extends, JavaScriptParser.Super, JavaScriptParser.Const,
                           JavaScriptParser.Export, JavaScriptParser.Import, JavaScriptParser.Async,
                           JavaScriptParser.Await, JavaScriptParser.Implements, JavaScriptParser.StrictLet,
                           JavaScriptParser.NonStrictLet, JavaScriptParser.Private, JavaScriptParser.Public,
                           JavaScriptParser.Interface, JavaScriptParser.Package, JavaScriptParser.Protected,
                           JavaScriptParser.Static, JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.state = 231
                self.identifierName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.As:
                self.state = 234
                self.match(JavaScriptParser.As)
                self.state = 235
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportFromContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def From(self):
            return self.getToken(JavaScriptParser.From, 0)

        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_importFrom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportFrom"):
                listener.enterImportFrom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportFrom"):
                listener.exitImportFrom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportFrom"):
                return visitor.visitImportFrom(self)
            else:
                return visitor.visitChildren(self)

    def importFrom(self):

        localctx = JavaScriptParser.ImportFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(JavaScriptParser.From)
            self.state = 239
            self.match(JavaScriptParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext, i)

        def As(self):
            return self.getToken(JavaScriptParser.As, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_aliasName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasName"):
                listener.enterAliasName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasName"):
                listener.exitAliasName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAliasName"):
                return visitor.visitAliasName(self)
            else:
                return visitor.visitChildren(self)

    def aliasName(self):

        localctx = JavaScriptParser.AliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_aliasName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.identifierName()
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.As:
                self.state = 242
                self.match(JavaScriptParser.As)
                self.state = 243
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaScriptParser.RULE_exportStatement

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ExportDefaultDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(JavaScriptParser.Export, 0)

        def Default(self):
            return self.getToken(JavaScriptParser.Default, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExportDefaultDeclaration"):
                listener.enterExportDefaultDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExportDefaultDeclaration"):
                listener.exitExportDefaultDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExportDefaultDeclaration"):
                return visitor.visitExportDefaultDeclaration(self)
            else:
                return visitor.visitChildren(self)

    class ExportDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(JavaScriptParser.Export, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def exportFromBlock(self):
            return self.getTypedRuleContext(JavaScriptParser.ExportFromBlockContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(JavaScriptParser.DeclarationContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExportDeclaration"):
                listener.enterExportDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExportDeclaration"):
                listener.exitExportDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExportDeclaration"):
                return visitor.visitExportDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def exportStatement(self):

        localctx = JavaScriptParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_exportStatement)
        try:
            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.ExportDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.match(JavaScriptParser.Export)
                self.state = 249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
                if la_ == 1:
                    self.state = 247
                    self.exportFromBlock()
                    pass

                elif la_ == 2:
                    self.state = 248
                    self.declaration()
                    pass

                self.state = 251
                self.eos()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.ExportDefaultDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.match(JavaScriptParser.Export)
                self.state = 254
                self.match(JavaScriptParser.Default)
                self.state = 255
                self.singleExpression(0)
                self.state = 256
                self.eos()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportFromBlockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importNamespace(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportNamespaceContext, 0)

        def importFrom(self):
            return self.getTypedRuleContext(JavaScriptParser.ImportFromContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def moduleItems(self):
            return self.getTypedRuleContext(JavaScriptParser.ModuleItemsContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_exportFromBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExportFromBlock"):
                listener.enterExportFromBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExportFromBlock"):
                listener.exitExportFromBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExportFromBlock"):
                return visitor.visitExportFromBlock(self)
            else:
                return visitor.visitChildren(self)

    def exportFromBlock(self):

        localctx = JavaScriptParser.ExportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_exportFromBlock)
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Multiply, JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral,
                         JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof,
                         JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New,
                         JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally,
                         JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue,
                         JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While,
                         JavaScriptParser.Debugger, JavaScriptParser.Function, JavaScriptParser.This,
                         JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw,
                         JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As,
                         JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends,
                         JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export,
                         JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await,
                         JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet,
                         JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface,
                         JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static,
                         JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self.importNamespace()
                self.state = 261
                self.importFrom()
                self.state = 262
                self.eos()
                pass
            elif token in [JavaScriptParser.OpenBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.moduleItems()
                self.state = 266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
                if la_ == 1:
                    self.state = 265
                    self.importFrom()

                self.state = 268
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableStatementContext, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassDeclarationContext, 0)

        def functionDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionDeclarationContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def declaration(self):

        localctx = JavaScriptParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_declaration)
        try:
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Var, JavaScriptParser.Const, JavaScriptParser.StrictLet,
                         JavaScriptParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.variableStatement()
                pass
            elif token in [JavaScriptParser.Class]:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.classDeclaration()
                pass
            elif token in [JavaScriptParser.Function, JavaScriptParser.Async]:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.functionDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_variableStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableStatement"):
                listener.enterVariableStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableStatement"):
                listener.exitVariableStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableStatement"):
                return visitor.visitVariableStatement(self)
            else:
                return visitor.visitChildren(self)

    def variableStatement(self):

        localctx = JavaScriptParser.VariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_variableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.variableDeclarationList()
            self.state = 278
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varModifier(self):
            return self.getTypedRuleContext(JavaScriptParser.VarModifierContext, 0)

        def variableDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_variableDeclarationList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclarationList"):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclarationList"):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclarationList"):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclarationList(self):

        localctx = JavaScriptParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_variableDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.varModifier()
            self.state = 281
            self.variableDeclaration()
            self.state = 286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 282
                    self.match(JavaScriptParser.Comma)
                    self.state = 283
                    self.variableDeclaration()
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_variableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclaration"):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclaration"):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclaration"):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclaration(self):

        localctx = JavaScriptParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.assignable()
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
            if la_ == 1:
                self.state = 290
                self.match(JavaScriptParser.Assign)
                self.state = 291
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(JavaScriptParser.SemiColon, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_emptyStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmptyStatement"):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmptyStatement"):
                listener.exitEmptyStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEmptyStatement"):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)

    def emptyStatement(self):

        localctx = JavaScriptParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(JavaScriptParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_expressionStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionStatement"):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionStatement"):
                listener.exitExpressionStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionStatement"):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)

    def expressionStatement(self):

        localctx = JavaScriptParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            if not self.notOpenBraceAndNotFunction():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.notOpenBraceAndNotFunction()")
            self.state = 297
            self.expressionSequence()
            self.state = 298
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(JavaScriptParser.If, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.StatementContext, i)

        def Else(self):
            return self.getToken(JavaScriptParser.Else, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_ifStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIfStatement"):
                listener.enterIfStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIfStatement"):
                listener.exitIfStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfStatement"):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)

    def ifStatement(self):

        localctx = JavaScriptParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(JavaScriptParser.If)
            self.state = 301
            self.match(JavaScriptParser.OpenParen)
            self.state = 302
            self.expressionSequence()
            self.state = 303
            self.match(JavaScriptParser.CloseParen)
            self.state = 304
            self.statement()
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.state = 305
                self.match(JavaScriptParser.Else)
                self.state = 306
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaScriptParser.RULE_iterationStatement

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DoStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(JavaScriptParser.Do, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def While(self):
            return self.getToken(JavaScriptParser.While, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoStatement"):
                listener.enterDoStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoStatement"):
                listener.exitDoStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDoStatement"):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)

    class WhileStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(JavaScriptParser.While, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhileStatement"):
                listener.enterWhileStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhileStatement"):
                listener.exitWhileStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhileStatement"):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)

    class ForStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def expressionSequence(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ExpressionSequenceContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, i)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForStatement"):
                listener.enterForStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForStatement"):
                listener.exitForStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForStatement"):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)

    class ForInStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)

        def In(self):
            return self.getToken(JavaScriptParser.In, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForInStatement"):
                listener.enterForInStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForInStatement"):
                listener.exitForInStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForInStatement"):
                return visitor.visitForInStatement(self)
            else:
                return visitor.visitChildren(self)

    class ForOfStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(JavaScriptParser.VariableDeclarationListContext, 0)

        def Await(self):
            return self.getToken(JavaScriptParser.Await, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForOfStatement"):
                listener.enterForOfStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForOfStatement"):
                listener.exitForOfStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForOfStatement"):
                return visitor.visitForOfStatement(self)
            else:
                return visitor.visitChildren(self)

    def iterationStatement(self):

        localctx = JavaScriptParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_iterationStatement)
        self._la = 0  # Token type
        try:
            self.state = 365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.match(JavaScriptParser.Do)
                self.state = 310
                self.statement()
                self.state = 311
                self.match(JavaScriptParser.While)
                self.state = 312
                self.match(JavaScriptParser.OpenParen)
                self.state = 313
                self.expressionSequence()
                self.state = 314
                self.match(JavaScriptParser.CloseParen)
                self.state = 315
                self.eos()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.match(JavaScriptParser.While)
                self.state = 318
                self.match(JavaScriptParser.OpenParen)
                self.state = 319
                self.expressionSequence()
                self.state = 320
                self.match(JavaScriptParser.CloseParen)
                self.state = 321
                self.statement()
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(JavaScriptParser.For)
                self.state = 324
                self.match(JavaScriptParser.OpenParen)
                self.state = 327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
                if la_ == 1:
                    self.state = 325
                    self.expressionSequence()

                elif la_ == 2:
                    self.state = 326
                    self.variableDeclarationList()

                self.state = 329
                self.match(JavaScriptParser.SemiColon)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (
                        1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (
                                1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (
                                1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (
                                1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (
                                1 << JavaScriptParser.NullLiteral) | (1 << JavaScriptParser.BooleanLiteral) | (
                                1 << JavaScriptParser.DecimalLiteral) | (1 << JavaScriptParser.HexIntegerLiteral) | (
                                1 << JavaScriptParser.OctalIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                        (1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (
                        1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.Typeof - 64)) | (
                                                     1 << (JavaScriptParser.New - 64)) | (
                                                     1 << (JavaScriptParser.Void - 64)) | (
                                                     1 << (JavaScriptParser.Function - 64)) | (
                                                     1 << (JavaScriptParser.This - 64)) | (
                                                     1 << (JavaScriptParser.Delete - 64)) | (
                                                     1 << (JavaScriptParser.Class - 64)) | (
                                                     1 << (JavaScriptParser.Super - 64)) | (
                                                     1 << (JavaScriptParser.Import - 64)) | (
                                                     1 << (JavaScriptParser.Async - 64)) | (
                                                     1 << (JavaScriptParser.Await - 64)) | (
                                                     1 << (JavaScriptParser.NonStrictLet - 64)) | (
                                                     1 << (JavaScriptParser.Yield - 64)) | (
                                                     1 << (JavaScriptParser.Identifier - 64)) | (
                                                     1 << (JavaScriptParser.StringLiteral - 64)) | (
                                                     1 << (JavaScriptParser.TemplateStringLiteral - 64)))) != 0):
                    self.state = 330
                    self.expressionSequence()

                self.state = 333
                self.match(JavaScriptParser.SemiColon)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (
                        1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (
                                1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (
                                1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (
                                1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (
                                1 << JavaScriptParser.NullLiteral) | (1 << JavaScriptParser.BooleanLiteral) | (
                                1 << JavaScriptParser.DecimalLiteral) | (1 << JavaScriptParser.HexIntegerLiteral) | (
                                1 << JavaScriptParser.OctalIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                        (1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (
                        1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (
                                                     1 << (JavaScriptParser.Typeof - 64)) | (
                                                     1 << (JavaScriptParser.New - 64)) | (
                                                     1 << (JavaScriptParser.Void - 64)) | (
                                                     1 << (JavaScriptParser.Function - 64)) | (
                                                     1 << (JavaScriptParser.This - 64)) | (
                                                     1 << (JavaScriptParser.Delete - 64)) | (
                                                     1 << (JavaScriptParser.Class - 64)) | (
                                                     1 << (JavaScriptParser.Super - 64)) | (
                                                     1 << (JavaScriptParser.Import - 64)) | (
                                                     1 << (JavaScriptParser.Async - 64)) | (
                                                     1 << (JavaScriptParser.Await - 64)) | (
                                                     1 << (JavaScriptParser.NonStrictLet - 64)) | (
                                                     1 << (JavaScriptParser.Yield - 64)) | (
                                                     1 << (JavaScriptParser.Identifier - 64)) | (
                                                     1 << (JavaScriptParser.StringLiteral - 64)) | (
                                                     1 << (JavaScriptParser.TemplateStringLiteral - 64)))) != 0):
                    self.state = 334
                    self.expressionSequence()

                self.state = 337
                self.match(JavaScriptParser.CloseParen)
                self.state = 338
                self.statement()
                pass

            elif la_ == 4:
                localctx = JavaScriptParser.ForInStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 339
                self.match(JavaScriptParser.For)
                self.state = 340
                self.match(JavaScriptParser.OpenParen)
                self.state = 343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
                if la_ == 1:
                    self.state = 341
                    self.singleExpression(0)
                    pass

                elif la_ == 2:
                    self.state = 342
                    self.variableDeclarationList()
                    pass

                self.state = 345
                self.match(JavaScriptParser.In)
                self.state = 346
                self.expressionSequence()
                self.state = 347
                self.match(JavaScriptParser.CloseParen)
                self.state = 348
                self.statement()
                pass

            elif la_ == 5:
                localctx = JavaScriptParser.ForOfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 350
                self.match(JavaScriptParser.For)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Await:
                    self.state = 351
                    self.match(JavaScriptParser.Await)

                self.state = 354
                self.match(JavaScriptParser.OpenParen)
                self.state = 357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
                if la_ == 1:
                    self.state = 355
                    self.singleExpression(0)
                    pass

                elif la_ == 2:
                    self.state = 356
                    self.variableDeclarationList()
                    pass

                self.state = 359
                self.identifier()
                self.state = 360
                if not self.p("of"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.p(\"of\")")
                self.state = 361
                self.expressionSequence()
                self.state = 362
                self.match(JavaScriptParser.CloseParen)
                self.state = 363
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarModifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Var(self):
            return self.getToken(JavaScriptParser.Var, 0)

        def let(self):
            return self.getTypedRuleContext(JavaScriptParser.LetContext, 0)

        def Const(self):
            return self.getToken(JavaScriptParser.Const, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_varModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVarModifier"):
                listener.enterVarModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVarModifier"):
                listener.exitVarModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarModifier"):
                return visitor.visitVarModifier(self)
            else:
                return visitor.visitChildren(self)

    def varModifier(self):

        localctx = JavaScriptParser.VarModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_varModifier)
        try:
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Var]:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.match(JavaScriptParser.Var)
                pass
            elif token in [JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.let()
                pass
            elif token in [JavaScriptParser.Const]:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.match(JavaScriptParser.Const)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(JavaScriptParser.Continue, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_continueStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContinueStatement"):
                listener.enterContinueStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContinueStatement"):
                listener.exitContinueStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContinueStatement"):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)

    def continueStatement(self):

        localctx = JavaScriptParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(JavaScriptParser.Continue)
            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
            if la_ == 1:
                self.state = 373
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 374
                self.identifier()

            self.state = 377
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(JavaScriptParser.Break, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_breakStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBreakStatement"):
                listener.enterBreakStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBreakStatement"):
                listener.exitBreakStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreakStatement"):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)

    def breakStatement(self):

        localctx = JavaScriptParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(JavaScriptParser.Break)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.state = 380
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 381
                self.identifier()

            self.state = 384
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(JavaScriptParser.Return, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_returnStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnStatement"):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)

    def returnStatement(self):

        localctx = JavaScriptParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(JavaScriptParser.Return)
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
            if la_ == 1:
                self.state = 387
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 388
                self.expressionSequence()

            self.state = 391
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(JavaScriptParser.Yield, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_yieldStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldStatement"):
                listener.enterYieldStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldStatement"):
                listener.exitYieldStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldStatement"):
                return visitor.visitYieldStatement(self)
            else:
                return visitor.visitChildren(self)

    def yieldStatement(self):

        localctx = JavaScriptParser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(JavaScriptParser.Yield)
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
            if la_ == 1:
                self.state = 394
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 395
                self.expressionSequence()

            self.state = 398
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def With(self):
            return self.getToken(JavaScriptParser.With, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_withStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWithStatement"):
                listener.enterWithStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWithStatement"):
                listener.exitWithStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWithStatement"):
                return visitor.visitWithStatement(self)
            else:
                return visitor.visitChildren(self)

    def withStatement(self):

        localctx = JavaScriptParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_withStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(JavaScriptParser.With)
            self.state = 401
            self.match(JavaScriptParser.OpenParen)
            self.state = 402
            self.expressionSequence()
            self.state = 403
            self.match(JavaScriptParser.CloseParen)
            self.state = 404
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(JavaScriptParser.Switch, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def caseBlock(self):
            return self.getTypedRuleContext(JavaScriptParser.CaseBlockContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_switchStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSwitchStatement"):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSwitchStatement"):
                listener.exitSwitchStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSwitchStatement"):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)

    def switchStatement(self):

        localctx = JavaScriptParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(JavaScriptParser.Switch)
            self.state = 407
            self.match(JavaScriptParser.OpenParen)
            self.state = 408
            self.expressionSequence()
            self.state = 409
            self.match(JavaScriptParser.CloseParen)
            self.state = 410
            self.caseBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseBlockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClauses(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.CaseClausesContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.CaseClausesContext, i)

        def defaultClause(self):
            return self.getTypedRuleContext(JavaScriptParser.DefaultClauseContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_caseBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseBlock"):
                listener.enterCaseBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseBlock"):
                listener.exitCaseBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseBlock"):
                return visitor.visitCaseBlock(self)
            else:
                return visitor.visitChildren(self)

    def caseBlock(self):

        localctx = JavaScriptParser.CaseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_caseBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(JavaScriptParser.OpenBrace)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Case:
                self.state = 413
                self.caseClauses()

            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Default:
                self.state = 416
                self.defaultClause()
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Case:
                    self.state = 417
                    self.caseClauses()

            self.state = 422
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseClausesContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.CaseClauseContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_caseClauses

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseClauses"):
                listener.enterCaseClauses(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseClauses"):
                listener.exitCaseClauses(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseClauses"):
                return visitor.visitCaseClauses(self)
            else:
                return visitor.visitChildren(self)

    def caseClauses(self):

        localctx = JavaScriptParser.CaseClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_caseClauses)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 424
                self.caseClause()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == JavaScriptParser.Case):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(JavaScriptParser.Case, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def statementList(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementListContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_caseClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseClause"):
                listener.enterCaseClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseClause"):
                listener.exitCaseClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseClause"):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)

    def caseClause(self):

        localctx = JavaScriptParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_caseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(JavaScriptParser.Case)
            self.state = 430
            self.expressionSequence()
            self.state = 431
            self.match(JavaScriptParser.Colon)
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
            if la_ == 1:
                self.state = 432
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(JavaScriptParser.Default, 0)

        def statementList(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementListContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_defaultClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultClause"):
                listener.enterDefaultClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultClause"):
                listener.exitDefaultClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefaultClause"):
                return visitor.visitDefaultClause(self)
            else:
                return visitor.visitChildren(self)

    def defaultClause(self):

        localctx = JavaScriptParser.DefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_defaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(JavaScriptParser.Default)
            self.state = 436
            self.match(JavaScriptParser.Colon)
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
            if la_ == 1:
                self.state = 437
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaScriptParser.StatementContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_labelledStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelledStatement"):
                listener.enterLabelledStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelledStatement"):
                listener.exitLabelledStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelledStatement"):
                return visitor.visitLabelledStatement(self)
            else:
                return visitor.visitChildren(self)

    def labelledStatement(self):

        localctx = JavaScriptParser.LabelledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_labelledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.identifier()
            self.state = 441
            self.match(JavaScriptParser.Colon)
            self.state = 442
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(JavaScriptParser.Throw, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_throwStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThrowStatement"):
                listener.enterThrowStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThrowStatement"):
                listener.exitThrowStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitThrowStatement"):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)

    def throwStatement(self):

        localctx = JavaScriptParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(JavaScriptParser.Throw)
            self.state = 445
            if not self.notLineTerminator():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.notLineTerminator()")
            self.state = 446
            self.expressionSequence()
            self.state = 447
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(JavaScriptParser.Try, 0)

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext, 0)

        def catchProduction(self):
            return self.getTypedRuleContext(JavaScriptParser.CatchProductionContext, 0)

        def finallyProduction(self):
            return self.getTypedRuleContext(JavaScriptParser.FinallyProductionContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_tryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryStatement"):
                listener.enterTryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryStatement"):
                listener.exitTryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTryStatement"):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)

    def tryStatement(self):

        localctx = JavaScriptParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(JavaScriptParser.Try)
            self.state = 450
            self.block()
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Catch]:
                self.state = 451
                self.catchProduction()
                self.state = 453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
                if la_ == 1:
                    self.state = 452
                    self.finallyProduction()

                pass
            elif token in [JavaScriptParser.Finally]:
                self.state = 455
                self.finallyProduction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchProductionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(JavaScriptParser.Catch, 0)

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext, 0)

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_catchProduction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatchProduction"):
                listener.enterCatchProduction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatchProduction"):
                listener.exitCatchProduction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatchProduction"):
                return visitor.visitCatchProduction(self)
            else:
                return visitor.visitChildren(self)

    def catchProduction(self):

        localctx = JavaScriptParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_catchProduction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(JavaScriptParser.Catch)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.OpenParen:
                self.state = 459
                self.match(JavaScriptParser.OpenParen)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.OpenBracket or _la == JavaScriptParser.OpenBrace or (
                        (((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 460
                    self.assignable()

                self.state = 463
                self.match(JavaScriptParser.CloseParen)

            self.state = 466
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyProductionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(JavaScriptParser.Finally, 0)

        def block(self):
            return self.getTypedRuleContext(JavaScriptParser.BlockContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_finallyProduction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFinallyProduction"):
                listener.enterFinallyProduction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFinallyProduction"):
                listener.exitFinallyProduction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFinallyProduction"):
                return visitor.visitFinallyProduction(self)
            else:
                return visitor.visitChildren(self)

    def finallyProduction(self):

        localctx = JavaScriptParser.FinallyProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_finallyProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(JavaScriptParser.Finally)
            self.state = 469
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DebuggerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Debugger(self):
            return self.getToken(JavaScriptParser.Debugger, 0)

        def eos(self):
            return self.getTypedRuleContext(JavaScriptParser.EosContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_debuggerStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDebuggerStatement"):
                listener.enterDebuggerStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDebuggerStatement"):
                listener.exitDebuggerStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDebuggerStatement"):
                return visitor.visitDebuggerStatement(self)
            else:
                return visitor.visitChildren(self)

    def debuggerStatement(self):

        localctx = JavaScriptParser.DebuggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_debuggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(JavaScriptParser.Debugger)
            self.state = 472
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function(self):
            return self.getToken(JavaScriptParser.Function, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_functionDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionDeclaration"):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionDeclaration"):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionDeclaration"):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def functionDeclaration(self):

        localctx = JavaScriptParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Async:
                self.state = 474
                self.match(JavaScriptParser.Async)

            self.state = 477
            self.match(JavaScriptParser.Function)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Multiply:
                self.state = 478
                self.match(JavaScriptParser.Multiply)

            self.state = 481
            self.identifier()
            self.state = 482
            self.match(JavaScriptParser.OpenParen)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (
                    1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & (
                    (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                    1 << (JavaScriptParser.Identifier - 105)))) != 0):
                self.state = 483
                self.formalParameterList()

            self.state = 486
            self.match(JavaScriptParser.CloseParen)
            self.state = 487
            self.match(JavaScriptParser.OpenBrace)
            self.state = 488
            self.functionBody()
            self.state = 489
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(JavaScriptParser.Class, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def classTail(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassTailContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_classDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassDeclaration"):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassDeclaration"):
                listener.exitClassDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassDeclaration"):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def classDeclaration(self):

        localctx = JavaScriptParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(JavaScriptParser.Class)
            self.state = 492
            self.identifier()
            self.state = 493
            self.classTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassTailContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extends(self):
            return self.getToken(JavaScriptParser.Extends, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def classElement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ClassElementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ClassElementContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_classTail

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassTail"):
                listener.enterClassTail(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassTail"):
                listener.exitClassTail(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassTail"):
                return visitor.visitClassTail(self)
            else:
                return visitor.visitChildren(self)

    def classTail(self):

        localctx = JavaScriptParser.ClassTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classTail)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Extends:
                self.state = 495
                self.match(JavaScriptParser.Extends)
                self.state = 496
                self.singleExpression(0)

            self.state = 499
            self.match(JavaScriptParser.OpenBrace)
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 500
                    self.classElement()
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)

            self.state = 506
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassElementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDefinition(self):
            return self.getTypedRuleContext(JavaScriptParser.MethodDefinitionContext, 0)

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext, 0)

        def objectLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ObjectLiteralContext, 0)

        def Static(self, i: int = None):
            if i is None:
                return self.getTokens(JavaScriptParser.Static)
            else:
                return self.getToken(JavaScriptParser.Static, i)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, i)

        def Async(self, i: int = None):
            if i is None:
                return self.getTokens(JavaScriptParser.Async)
            else:
                return self.getToken(JavaScriptParser.Async, i)

        def emptyStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.EmptyStatementContext, 0)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_classElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassElement"):
                listener.enterClassElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassElement"):
                listener.exitClassElement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassElement"):
                return visitor.visitClassElement(self)
            else:
                return visitor.visitChildren(self)

    def classElement(self):

        localctx = JavaScriptParser.ClassElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_classElement)
        self._la = 0  # Token type
        try:
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 50, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 512
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 49, self._ctx)
                        if la_ == 1:
                            self.state = 508
                            self.match(JavaScriptParser.Static)
                            pass

                        elif la_ == 2:
                            self.state = 509
                            if not self.n("static"):
                                from antlr4.error.Errors import FailedPredicateException
                                raise FailedPredicateException(self, "self.n(\"static\")")
                            self.state = 510
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 511
                            self.match(JavaScriptParser.Async)
                            pass

                    self.state = 516
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 50, self._ctx)

                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
                if la_ == 1:
                    self.state = 517
                    self.methodDefinition()
                    pass

                elif la_ == 2:
                    self.state = 518
                    self.assignable()
                    self.state = 519
                    self.match(JavaScriptParser.Assign)
                    self.state = 520
                    self.objectLiteral()
                    self.state = 521
                    self.match(JavaScriptParser.SemiColon)
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.emptyStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Hashtag:
                    self.state = 526
                    self.match(JavaScriptParser.Hashtag)

                self.state = 529
                self.propertyName()
                self.state = 530
                self.match(JavaScriptParser.Assign)
                self.state = 531
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext, 0)

        def getter(self):
            return self.getTypedRuleContext(JavaScriptParser.GetterContext, 0)

        def setter(self):
            return self.getTypedRuleContext(JavaScriptParser.SetterContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_methodDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodDefinition"):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodDefinition"):
                listener.exitMethodDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodDefinition"):
                return visitor.visitMethodDefinition(self)
            else:
                return visitor.visitChildren(self)

    def methodDefinition(self):

        localctx = JavaScriptParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_methodDefinition)
        self._la = 0  # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Multiply:
                    self.state = 535
                    self.match(JavaScriptParser.Multiply)

                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Hashtag:
                    self.state = 538
                    self.match(JavaScriptParser.Hashtag)

                self.state = 541
                self.propertyName()
                self.state = 542
                self.match(JavaScriptParser.OpenParen)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (
                        1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and (
                        (1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 543
                    self.formalParameterList()

                self.state = 546
                self.match(JavaScriptParser.CloseParen)
                self.state = 547
                self.match(JavaScriptParser.OpenBrace)
                self.state = 548
                self.functionBody()
                self.state = 549
                self.match(JavaScriptParser.CloseBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 551
                    self.match(JavaScriptParser.Multiply)

                self.state = 555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                if la_ == 1:
                    self.state = 554
                    self.match(JavaScriptParser.Hashtag)

                self.state = 557
                self.getter()
                self.state = 558
                self.match(JavaScriptParser.OpenParen)
                self.state = 559
                self.match(JavaScriptParser.CloseParen)
                self.state = 560
                self.match(JavaScriptParser.OpenBrace)
                self.state = 561
                self.functionBody()
                self.state = 562
                self.match(JavaScriptParser.CloseBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                if la_ == 1:
                    self.state = 564
                    self.match(JavaScriptParser.Multiply)

                self.state = 568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
                if la_ == 1:
                    self.state = 567
                    self.match(JavaScriptParser.Hashtag)

                self.state = 570
                self.setter()
                self.state = 571
                self.match(JavaScriptParser.OpenParen)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (
                        1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and (
                        (1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 572
                    self.formalParameterList()

                self.state = 575
                self.match(JavaScriptParser.CloseParen)
                self.state = 576
                self.match(JavaScriptParser.OpenBrace)
                self.state = 577
                self.functionBody()
                self.state = 578
                self.match(JavaScriptParser.CloseBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterArg(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.FormalParameterArgContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.FormalParameterArgContext, i)

        def lastFormalParameterArg(self):
            return self.getTypedRuleContext(JavaScriptParser.LastFormalParameterArgContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_formalParameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormalParameterList"):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormalParameterList"):
                listener.exitFormalParameterList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormalParameterList"):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)

    def formalParameterList(self):

        localctx = JavaScriptParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameterList)
        self._la = 0  # Token type
        try:
            self.state = 595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.OpenBracket, JavaScriptParser.OpenBrace, JavaScriptParser.Async,
                         JavaScriptParser.NonStrictLet, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.formalParameterArg()
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 583
                        self.match(JavaScriptParser.Comma)
                        self.state = 584
                        self.formalParameterArg()
                    self.state = 589
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)

                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Comma:
                    self.state = 590
                    self.match(JavaScriptParser.Comma)
                    self.state = 591
                    self.lastFormalParameterArg()

                pass
            elif token in [JavaScriptParser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self.lastFormalParameterArg()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterArgContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignableContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_formalParameterArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormalParameterArg"):
                listener.enterFormalParameterArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormalParameterArg"):
                listener.exitFormalParameterArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFormalParameterArg"):
                return visitor.visitFormalParameterArg(self)
            else:
                return visitor.visitChildren(self)

    def formalParameterArg(self):

        localctx = JavaScriptParser.FormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_formalParameterArg)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.assignable()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Assign:
                self.state = 598
                self.match(JavaScriptParser.Assign)
                self.state = 599
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LastFormalParameterArgContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_lastFormalParameterArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLastFormalParameterArg"):
                listener.enterLastFormalParameterArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLastFormalParameterArg"):
                listener.exitLastFormalParameterArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLastFormalParameterArg"):
                return visitor.visitLastFormalParameterArg(self)
            else:
                return visitor.visitChildren(self)

    def lastFormalParameterArg(self):

        localctx = JavaScriptParser.LastFormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_lastFormalParameterArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(JavaScriptParser.Ellipsis)
            self.state = 603
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElements(self):
            return self.getTypedRuleContext(JavaScriptParser.SourceElementsContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_functionBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionBody"):
                listener.enterFunctionBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionBody"):
                listener.exitFunctionBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionBody"):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)

    def functionBody(self):

        localctx = JavaScriptParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.state = 605
                self.sourceElements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceElementsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SourceElementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SourceElementContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_sourceElements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourceElements"):
                listener.enterSourceElements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourceElements"):
                listener.exitSourceElements(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourceElements"):
                return visitor.visitSourceElements(self)
            else:
                return visitor.visitChildren(self)

    def sourceElements(self):

        localctx = JavaScriptParser.SourceElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_sourceElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 608
                    self.sourceElement()

                else:
                    raise NoViableAltException(self)
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementList(self):
            return self.getTypedRuleContext(JavaScriptParser.ElementListContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrayLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayLiteral"):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayLiteral"):
                listener.exitArrayLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayLiteral"):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)

    def arrayLiteral(self):

        localctx = JavaScriptParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_arrayLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(JavaScriptParser.OpenBracket)
            self.state = 614
            self.elementList()
            self.state = 615
            self.match(JavaScriptParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayElement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ArrayElementContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ArrayElementContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_elementList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementList"):
                listener.enterElementList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementList"):
                listener.exitElementList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementList"):
                return visitor.visitElementList(self)
            else:
                return visitor.visitChildren(self)

    def elementList(self):

        localctx = JavaScriptParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_elementList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 617
                    self.match(JavaScriptParser.Comma)
                self.state = 622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)

            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (
                    1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (
                            1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (
                            1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (
                            1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (
                            1 << JavaScriptParser.Not) | (1 << JavaScriptParser.NullLiteral) | (
                            1 << JavaScriptParser.BooleanLiteral) | (1 << JavaScriptParser.DecimalLiteral) | (
                            1 << JavaScriptParser.HexIntegerLiteral) | (
                            1 << JavaScriptParser.OctalIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                    (1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (
                    1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.Typeof - 64)) | (
                                                 1 << (JavaScriptParser.New - 64)) | (
                                                 1 << (JavaScriptParser.Void - 64)) | (
                                                 1 << (JavaScriptParser.Function - 64)) | (
                                                 1 << (JavaScriptParser.This - 64)) | (
                                                 1 << (JavaScriptParser.Delete - 64)) | (
                                                 1 << (JavaScriptParser.Class - 64)) | (
                                                 1 << (JavaScriptParser.Super - 64)) | (
                                                 1 << (JavaScriptParser.Import - 64)) | (
                                                 1 << (JavaScriptParser.Async - 64)) | (
                                                 1 << (JavaScriptParser.Await - 64)) | (
                                                 1 << (JavaScriptParser.NonStrictLet - 64)) | (
                                                 1 << (JavaScriptParser.Yield - 64)) | (
                                                 1 << (JavaScriptParser.Identifier - 64)) | (
                                                 1 << (JavaScriptParser.StringLiteral - 64)) | (
                                                 1 << (JavaScriptParser.TemplateStringLiteral - 64)))) != 0):
                self.state = 623
                self.arrayElement()

            self.state = 634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 626
                        self.match(JavaScriptParser.Comma)
                        self.state = 629
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == JavaScriptParser.Comma):
                            break

                    self.state = 631
                    self.arrayElement()
                self.state = 636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == JavaScriptParser.Comma:
                self.state = 637
                self.match(JavaScriptParser.Comma)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayElementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrayElement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayElement"):
                listener.enterArrayElement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayElement"):
                listener.exitArrayElement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayElement"):
                return visitor.visitArrayElement(self)
            else:
                return visitor.visitChildren(self)

    def arrayElement(self):

        localctx = JavaScriptParser.ArrayElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayElement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Ellipsis:
                self.state = 643
                self.match(JavaScriptParser.Ellipsis)

            self.state = 646
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaScriptParser.RULE_propertyAssignment

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyExpressionAssignment"):
                listener.enterPropertyExpressionAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyExpressionAssignment"):
                listener.exitPropertyExpressionAssignment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyExpressionAssignment"):
                return visitor.visitPropertyExpressionAssignment(self)
            else:
                return visitor.visitChildren(self)

    class ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComputedPropertyExpressionAssignment"):
                listener.enterComputedPropertyExpressionAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComputedPropertyExpressionAssignment"):
                listener.exitComputedPropertyExpressionAssignment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComputedPropertyExpressionAssignment"):
                return visitor.visitComputedPropertyExpressionAssignment(self)
            else:
                return visitor.visitChildren(self)

    class PropertyShorthandContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyShorthand"):
                listener.enterPropertyShorthand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyShorthand"):
                listener.exitPropertyShorthand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyShorthand"):
                return visitor.visitPropertyShorthand(self)
            else:
                return visitor.visitChildren(self)

    class PropertySetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setter(self):
            return self.getTypedRuleContext(JavaScriptParser.SetterContext, 0)

        def formalParameterArg(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterArgContext, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertySetter"):
                listener.enterPropertySetter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertySetter"):
                listener.exitPropertySetter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertySetter"):
                return visitor.visitPropertySetter(self)
            else:
                return visitor.visitChildren(self)

    class PropertyGetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def getter(self):
            return self.getTypedRuleContext(JavaScriptParser.GetterContext, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyGetter"):
                listener.enterPropertyGetter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyGetter"):
                listener.exitPropertyGetter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyGetter"):
                return visitor.visitPropertyGetter(self)
            else:
                return visitor.visitChildren(self)

    class FunctionPropertyContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionProperty"):
                listener.enterFunctionProperty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionProperty"):
                listener.exitFunctionProperty(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionProperty"):
                return visitor.visitFunctionProperty(self)
            else:
                return visitor.visitChildren(self)

    def propertyAssignment(self):

        localctx = JavaScriptParser.PropertyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_propertyAssignment)
        self._la = 0  # Token type
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.PropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.propertyName()
                self.state = 649
                self.match(JavaScriptParser.Colon)
                self.state = 650
                self.singleExpression(0)
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.ComputedPropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self.match(JavaScriptParser.OpenBracket)
                self.state = 653
                self.singleExpression(0)
                self.state = 654
                self.match(JavaScriptParser.CloseBracket)
                self.state = 655
                self.match(JavaScriptParser.Colon)
                self.state = 656
                self.singleExpression(0)
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.FunctionPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.match(JavaScriptParser.Async)

                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Multiply:
                    self.state = 661
                    self.match(JavaScriptParser.Multiply)

                self.state = 664
                self.propertyName()
                self.state = 665
                self.match(JavaScriptParser.OpenParen)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (
                        1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and (
                        (1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 666
                    self.formalParameterList()

                self.state = 669
                self.match(JavaScriptParser.CloseParen)
                self.state = 670
                self.match(JavaScriptParser.OpenBrace)
                self.state = 671
                self.functionBody()
                self.state = 672
                self.match(JavaScriptParser.CloseBrace)
                pass

            elif la_ == 4:
                localctx = JavaScriptParser.PropertyGetterContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 674
                self.getter()
                self.state = 675
                self.match(JavaScriptParser.OpenParen)
                self.state = 676
                self.match(JavaScriptParser.CloseParen)
                self.state = 677
                self.match(JavaScriptParser.OpenBrace)
                self.state = 678
                self.functionBody()
                self.state = 679
                self.match(JavaScriptParser.CloseBrace)
                pass

            elif la_ == 5:
                localctx = JavaScriptParser.PropertySetterContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 681
                self.setter()
                self.state = 682
                self.match(JavaScriptParser.OpenParen)
                self.state = 683
                self.formalParameterArg()
                self.state = 684
                self.match(JavaScriptParser.CloseParen)
                self.state = 685
                self.match(JavaScriptParser.OpenBrace)
                self.state = 686
                self.functionBody()
                self.state = 687
                self.match(JavaScriptParser.CloseBrace)
                pass

            elif la_ == 6:
                localctx = JavaScriptParser.PropertyShorthandContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Ellipsis:
                    self.state = 689
                    self.match(JavaScriptParser.Ellipsis)

                self.state = 692
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext, 0)

        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.NumericLiteralContext, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_propertyName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyName"):
                listener.enterPropertyName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyName"):
                listener.exitPropertyName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyName"):
                return visitor.visitPropertyName(self)
            else:
                return visitor.visitChildren(self)

    def propertyName(self):

        localctx = JavaScriptParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_propertyName)
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.NullLiteral, JavaScriptParser.BooleanLiteral, JavaScriptParser.Break,
                         JavaScriptParser.Do, JavaScriptParser.Instanceof, JavaScriptParser.Typeof,
                         JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New, JavaScriptParser.Var,
                         JavaScriptParser.Catch, JavaScriptParser.Finally, JavaScriptParser.Return,
                         JavaScriptParser.Void, JavaScriptParser.Continue, JavaScriptParser.For,
                         JavaScriptParser.Switch, JavaScriptParser.While, JavaScriptParser.Debugger,
                         JavaScriptParser.Function, JavaScriptParser.This, JavaScriptParser.With,
                         JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw, JavaScriptParser.Delete,
                         JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As, JavaScriptParser.From,
                         JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends,
                         JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export,
                         JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await,
                         JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet,
                         JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface,
                         JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static,
                         JavaScriptParser.Yield, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.identifierName()
                pass
            elif token in [JavaScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.match(JavaScriptParser.StringLiteral)
                pass
            elif token in [JavaScriptParser.DecimalLiteral, JavaScriptParser.HexIntegerLiteral,
                           JavaScriptParser.OctalIntegerLiteral, JavaScriptParser.OctalIntegerLiteral2,
                           JavaScriptParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 697
                self.numericLiteral()
                pass
            elif token in [JavaScriptParser.OpenBracket]:
                self.enterOuterAlt(localctx, 4)
                self.state = 698
                self.match(JavaScriptParser.OpenBracket)
                self.state = 699
                self.singleExpression(0)
                self.state = 700
                self.match(JavaScriptParser.CloseBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.ArgumentContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArguments"):
                listener.enterArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArguments"):
                listener.exitArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)

    def arguments(self):

        localctx = JavaScriptParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(JavaScriptParser.OpenParen)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (
                    1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (
                            1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (
                            1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (
                            1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (
                            1 << JavaScriptParser.Not) | (1 << JavaScriptParser.NullLiteral) | (
                            1 << JavaScriptParser.BooleanLiteral) | (1 << JavaScriptParser.DecimalLiteral) | (
                            1 << JavaScriptParser.HexIntegerLiteral) | (
                            1 << JavaScriptParser.OctalIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                    (1 << (_la - 64)) & ((1 << (JavaScriptParser.OctalIntegerLiteral2 - 64)) | (
                    1 << (JavaScriptParser.BinaryIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigHexIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigOctalIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigBinaryIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.BigDecimalIntegerLiteral - 64)) | (
                                                 1 << (JavaScriptParser.Typeof - 64)) | (
                                                 1 << (JavaScriptParser.New - 64)) | (
                                                 1 << (JavaScriptParser.Void - 64)) | (
                                                 1 << (JavaScriptParser.Function - 64)) | (
                                                 1 << (JavaScriptParser.This - 64)) | (
                                                 1 << (JavaScriptParser.Delete - 64)) | (
                                                 1 << (JavaScriptParser.Class - 64)) | (
                                                 1 << (JavaScriptParser.Super - 64)) | (
                                                 1 << (JavaScriptParser.Import - 64)) | (
                                                 1 << (JavaScriptParser.Async - 64)) | (
                                                 1 << (JavaScriptParser.Await - 64)) | (
                                                 1 << (JavaScriptParser.NonStrictLet - 64)) | (
                                                 1 << (JavaScriptParser.Yield - 64)) | (
                                                 1 << (JavaScriptParser.Identifier - 64)) | (
                                                 1 << (JavaScriptParser.StringLiteral - 64)) | (
                                                 1 << (JavaScriptParser.TemplateStringLiteral - 64)))) != 0):
                self.state = 705
                self.argument()
                self.state = 710
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 706
                        self.match(JavaScriptParser.Comma)
                        self.state = 707
                        self.argument()
                    self.state = 712
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Comma:
                    self.state = 713
                    self.match(JavaScriptParser.Comma)

            self.state = 718
            self.match(JavaScriptParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def Ellipsis(self):
            return self.getToken(JavaScriptParser.Ellipsis, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgument"):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)

    def argument(self):

        localctx = JavaScriptParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_argument)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Ellipsis:
                self.state = 720
                self.match(JavaScriptParser.Ellipsis)

            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
            if la_ == 1:
                self.state = 723
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.state = 724
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionSequenceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_expressionSequence

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionSequence"):
                listener.enterExpressionSequence(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionSequence"):
                listener.exitExpressionSequence(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionSequence"):
                return visitor.visitExpressionSequence(self)
            else:
                return visitor.visitChildren(self)

    def expressionSequence(self):

        localctx = JavaScriptParser.ExpressionSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expressionSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.singleExpression(0)
            self.state = 732
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 728
                    self.match(JavaScriptParser.Comma)
                    self.state = 729
                    self.singleExpression(0)
                self.state = 734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaScriptParser.RULE_singleExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TemplateStringExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def TemplateStringLiteral(self):
            return self.getToken(JavaScriptParser.TemplateStringLiteral, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateStringExpression"):
                listener.enterTemplateStringExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateStringExpression"):
                listener.exitTemplateStringExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemplateStringExpression"):
                return visitor.visitTemplateStringExpression(self)
            else:
                return visitor.visitChildren(self)

    class TernaryExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryExpression"):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryExpression"):
                listener.exitTernaryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTernaryExpression"):
                return visitor.visitTernaryExpression(self)
            else:
                return visitor.visitChildren(self)

    class LogicalAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalAndExpression"):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalAndExpression"):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogicalAndExpression"):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)

    class PowerExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPowerExpression"):
                listener.enterPowerExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPowerExpression"):
                listener.exitPowerExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPowerExpression"):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)

    class PreIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreIncrementExpression"):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreIncrementExpression"):
                listener.exitPreIncrementExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPreIncrementExpression"):
                return visitor.visitPreIncrementExpression(self)
            else:
                return visitor.visitChildren(self)

    class ObjectLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ObjectLiteralContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectLiteralExpression"):
                listener.enterObjectLiteralExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectLiteralExpression"):
                listener.exitObjectLiteralExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectLiteralExpression"):
                return visitor.visitObjectLiteralExpression(self)
            else:
                return visitor.visitChildren(self)

    class MetaExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(JavaScriptParser.New, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMetaExpression"):
                listener.enterMetaExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMetaExpression"):
                listener.exitMetaExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMetaExpression"):
                return visitor.visitMetaExpression(self)
            else:
                return visitor.visitChildren(self)

    class InExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def In(self):
            return self.getToken(JavaScriptParser.In, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInExpression"):
                listener.enterInExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInExpression"):
                listener.exitInExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInExpression"):
                return visitor.visitInExpression(self)
            else:
                return visitor.visitChildren(self)

    class LogicalOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalOrExpression"):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalOrExpression"):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogicalOrExpression"):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)

    class NotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNotExpression"):
                listener.enterNotExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNotExpression"):
                listener.exitNotExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNotExpression"):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)

    class PreDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreDecreaseExpression"):
                listener.enterPreDecreaseExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreDecreaseExpression"):
                listener.exitPreDecreaseExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPreDecreaseExpression"):
                return visitor.visitPreDecreaseExpression(self)
            else:
                return visitor.visitChildren(self)

    class ArgumentsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaScriptParser.ArgumentsContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgumentsExpression"):
                listener.enterArgumentsExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgumentsExpression"):
                listener.exitArgumentsExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgumentsExpression"):
                return visitor.visitArgumentsExpression(self)
            else:
                return visitor.visitChildren(self)

    class AwaitExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Await(self):
            return self.getToken(JavaScriptParser.Await, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAwaitExpression"):
                listener.enterAwaitExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAwaitExpression"):
                listener.exitAwaitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAwaitExpression"):
                return visitor.visitAwaitExpression(self)
            else:
                return visitor.visitChildren(self)

    class ThisExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(JavaScriptParser.This, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThisExpression"):
                listener.enterThisExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThisExpression"):
                listener.exitThisExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitThisExpression"):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)

    class FunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anoymousFunction(self):
            return self.getTypedRuleContext(JavaScriptParser.AnoymousFunctionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionExpression"):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionExpression"):
                listener.exitFunctionExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionExpression"):
                return visitor.visitFunctionExpression(self)
            else:
                return visitor.visitChildren(self)

    class UnaryMinusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryMinusExpression"):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryMinusExpression"):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryMinusExpression"):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)

    class AssignmentExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentExpression"):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentExpression"):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentExpression"):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)

    class PostDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostDecreaseExpression"):
                listener.enterPostDecreaseExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostDecreaseExpression"):
                listener.exitPostDecreaseExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPostDecreaseExpression"):
                return visitor.visitPostDecreaseExpression(self)
            else:
                return visitor.visitChildren(self)

    class TypeofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typeof(self):
            return self.getToken(JavaScriptParser.Typeof, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeofExpression"):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeofExpression"):
                listener.exitTypeofExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeofExpression"):
                return visitor.visitTypeofExpression(self)
            else:
                return visitor.visitChildren(self)

    class InstanceofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def Instanceof(self):
            return self.getToken(JavaScriptParser.Instanceof, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInstanceofExpression"):
                listener.enterInstanceofExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInstanceofExpression"):
                listener.exitInstanceofExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInstanceofExpression"):
                return visitor.visitInstanceofExpression(self)
            else:
                return visitor.visitChildren(self)

    class UnaryPlusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryPlusExpression"):
                listener.enterUnaryPlusExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryPlusExpression"):
                listener.exitUnaryPlusExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryPlusExpression"):
                return visitor.visitUnaryPlusExpression(self)
            else:
                return visitor.visitChildren(self)

    class DeleteExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(JavaScriptParser.Delete, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteExpression"):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteExpression"):
                listener.exitDeleteExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeleteExpression"):
                return visitor.visitDeleteExpression(self)
            else:
                return visitor.visitChildren(self)

    class ImportExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Import(self):
            return self.getToken(JavaScriptParser.Import, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportExpression"):
                listener.enterImportExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportExpression"):
                listener.exitImportExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportExpression"):
                return visitor.visitImportExpression(self)
            else:
                return visitor.visitChildren(self)

    class EqualityExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityExpression"):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityExpression"):
                listener.exitEqualityExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEqualityExpression"):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)

    class BitXOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitXOrExpression"):
                listener.enterBitXOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitXOrExpression"):
                listener.exitBitXOrExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitXOrExpression"):
                return visitor.visitBitXOrExpression(self)
            else:
                return visitor.visitChildren(self)

    class SuperExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Super(self):
            return self.getToken(JavaScriptParser.Super, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSuperExpression"):
                listener.enterSuperExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSuperExpression"):
                listener.exitSuperExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSuperExpression"):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)

    class MultiplicativeExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeExpression"):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeExpression"):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultiplicativeExpression"):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)

    class BitShiftExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitShiftExpression"):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitShiftExpression"):
                listener.exitBitShiftExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitShiftExpression"):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)

    class ParenthesizedExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesizedExpression"):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesizedExpression"):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesizedExpression"):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)

    class AdditiveExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveExpression"):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveExpression"):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAdditiveExpression"):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)

    class RelationalExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalExpression"):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalExpression"):
                listener.exitRelationalExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalExpression"):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)

    class PostIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostIncrementExpression"):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostIncrementExpression"):
                listener.exitPostIncrementExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPostIncrementExpression"):
                return visitor.visitPostIncrementExpression(self)
            else:
                return visitor.visitChildren(self)

    class YieldExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yieldStatement(self):
            return self.getTypedRuleContext(JavaScriptParser.YieldStatementContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterYieldExpression"):
                listener.enterYieldExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitYieldExpression"):
                listener.exitYieldExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYieldExpression"):
                return visitor.visitYieldExpression(self)
            else:
                return visitor.visitChildren(self)

    class BitNotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitNotExpression"):
                listener.enterBitNotExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitNotExpression"):
                listener.exitBitNotExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitNotExpression"):
                return visitor.visitBitNotExpression(self)
            else:
                return visitor.visitChildren(self)

    class NewExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(JavaScriptParser.New, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def arguments(self):
            return self.getTypedRuleContext(JavaScriptParser.ArgumentsContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewExpression"):
                listener.enterNewExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewExpression"):
                listener.exitNewExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNewExpression"):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)

    class LiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(JavaScriptParser.LiteralContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteralExpression"):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteralExpression"):
                listener.exitLiteralExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteralExpression"):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)

    class ArrayLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrayLiteralContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayLiteralExpression"):
                listener.enterArrayLiteralExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayLiteralExpression"):
                listener.exitArrayLiteralExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayLiteralExpression"):
                return visitor.visitArrayLiteralExpression(self)
            else:
                return visitor.visitChildren(self)

    class MemberDotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def identifierName(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberDotExpression"):
                listener.enterMemberDotExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberDotExpression"):
                listener.exitMemberDotExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMemberDotExpression"):
                return visitor.visitMemberDotExpression(self)
            else:
                return visitor.visitChildren(self)

    class ClassExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(JavaScriptParser.Class, 0)

        def classTail(self):
            return self.getTypedRuleContext(JavaScriptParser.ClassTailContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassExpression"):
                listener.enterClassExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassExpression"):
                listener.exitClassExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassExpression"):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)

    class MemberIndexExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(JavaScriptParser.ExpressionSequenceContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberIndexExpression"):
                listener.enterMemberIndexExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberIndexExpression"):
                listener.exitMemberIndexExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMemberIndexExpression"):
                return visitor.visitMemberIndexExpression(self)
            else:
                return visitor.visitChildren(self)

    class IdentifierExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierExpression"):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierExpression"):
                listener.exitIdentifierExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierExpression"):
                return visitor.visitIdentifierExpression(self)
            else:
                return visitor.visitChildren(self)

    class BitAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitAndExpression"):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitAndExpression"):
                listener.exitBitAndExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitAndExpression"):
                return visitor.visitBitAndExpression(self)
            else:
                return visitor.visitChildren(self)

    class BitOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitOrExpression"):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitOrExpression"):
                listener.exitBitOrExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBitOrExpression"):
                return visitor.visitBitOrExpression(self)
            else:
                return visitor.visitChildren(self)

    class AssignmentOperatorExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(JavaScriptParser.AssignmentOperatorContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentOperatorExpression"):
                listener.enterAssignmentOperatorExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentOperatorExpression"):
                listener.exitAssignmentOperatorExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentOperatorExpression"):
                return visitor.visitAssignmentOperatorExpression(self)
            else:
                return visitor.visitChildren(self)

    class VoidExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(JavaScriptParser.Void, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVoidExpression"):
                listener.enterVoidExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVoidExpression"):
                listener.exitVoidExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVoidExpression"):
                return visitor.visitVoidExpression(self)
            else:
                return visitor.visitChildren(self)

    class CoalesceExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoalesceExpression"):
                listener.enterCoalesceExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoalesceExpression"):
                listener.exitCoalesceExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoalesceExpression"):
                return visitor.visitCoalesceExpression(self)
            else:
                return visitor.visitChildren(self)

    def singleExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaScriptParser.SingleExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_singleExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.FunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 736
                self.anoymousFunction()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.ClassExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 737
                self.match(JavaScriptParser.Class)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 738
                    self.identifier()

                self.state = 741
                self.classTail()
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 742
                self.match(JavaScriptParser.New)
                self.state = 743
                self.singleExpression(0)
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 744
                    self.arguments()

                pass

            elif la_ == 4:
                localctx = JavaScriptParser.MetaExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 747
                self.match(JavaScriptParser.New)
                self.state = 748
                self.match(JavaScriptParser.Dot)
                self.state = 749
                self.identifier()
                pass

            elif la_ == 5:
                localctx = JavaScriptParser.DeleteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 750
                self.match(JavaScriptParser.Delete)
                self.state = 751
                self.singleExpression(37)
                pass

            elif la_ == 6:
                localctx = JavaScriptParser.VoidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 752
                self.match(JavaScriptParser.Void)
                self.state = 753
                self.singleExpression(36)
                pass

            elif la_ == 7:
                localctx = JavaScriptParser.TypeofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 754
                self.match(JavaScriptParser.Typeof)
                self.state = 755
                self.singleExpression(35)
                pass

            elif la_ == 8:
                localctx = JavaScriptParser.PreIncrementExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 756
                self.match(JavaScriptParser.PlusPlus)
                self.state = 757
                self.singleExpression(34)
                pass

            elif la_ == 9:
                localctx = JavaScriptParser.PreDecreaseExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 758
                self.match(JavaScriptParser.MinusMinus)
                self.state = 759
                self.singleExpression(33)
                pass

            elif la_ == 10:
                localctx = JavaScriptParser.UnaryPlusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 760
                self.match(JavaScriptParser.Plus)
                self.state = 761
                self.singleExpression(32)
                pass

            elif la_ == 11:
                localctx = JavaScriptParser.UnaryMinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 762
                self.match(JavaScriptParser.Minus)
                self.state = 763
                self.singleExpression(31)
                pass

            elif la_ == 12:
                localctx = JavaScriptParser.BitNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 764
                self.match(JavaScriptParser.BitNot)
                self.state = 765
                self.singleExpression(30)
                pass

            elif la_ == 13:
                localctx = JavaScriptParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 766
                self.match(JavaScriptParser.Not)
                self.state = 767
                self.singleExpression(29)
                pass

            elif la_ == 14:
                localctx = JavaScriptParser.AwaitExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 768
                self.match(JavaScriptParser.Await)
                self.state = 769
                self.singleExpression(28)
                pass

            elif la_ == 15:
                localctx = JavaScriptParser.ImportExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 770
                self.match(JavaScriptParser.Import)
                self.state = 771
                self.match(JavaScriptParser.OpenParen)
                self.state = 772
                self.singleExpression(0)
                self.state = 773
                self.match(JavaScriptParser.CloseParen)
                pass

            elif la_ == 16:
                localctx = JavaScriptParser.YieldExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 775
                self.yieldStatement()
                pass

            elif la_ == 17:
                localctx = JavaScriptParser.ThisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 776
                self.match(JavaScriptParser.This)
                pass

            elif la_ == 18:
                localctx = JavaScriptParser.IdentifierExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 777
                self.identifier()
                pass

            elif la_ == 19:
                localctx = JavaScriptParser.SuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 778
                self.match(JavaScriptParser.Super)
                pass

            elif la_ == 20:
                localctx = JavaScriptParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 779
                self.literal()
                pass

            elif la_ == 21:
                localctx = JavaScriptParser.ArrayLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 780
                self.arrayLiteral()
                pass

            elif la_ == 22:
                localctx = JavaScriptParser.ObjectLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 781
                self.objectLiteral()
                pass

            elif la_ == 23:
                localctx = JavaScriptParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 782
                self.match(JavaScriptParser.OpenParen)
                self.state = 783
                self.expressionSequence()
                self.state = 784
                self.match(JavaScriptParser.CloseParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 867
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                    if la_ == 1:
                        localctx = JavaScriptParser.PowerExpressionContext(self,
                                                                           JavaScriptParser.SingleExpressionContext(
                                                                               self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 788
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 789
                        self.match(JavaScriptParser.Power)
                        self.state = 790
                        self.singleExpression(27)
                        pass

                    elif la_ == 2:
                        localctx = JavaScriptParser.MultiplicativeExpressionContext(self,
                                                                                    JavaScriptParser.SingleExpressionContext(
                                                                                        self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 791
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 792
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << JavaScriptParser.Multiply) | (1 << JavaScriptParser.Divide) | (
                                1 << JavaScriptParser.Modulus))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 793
                        self.singleExpression(27)
                        pass

                    elif la_ == 3:
                        localctx = JavaScriptParser.AdditiveExpressionContext(self,
                                                                              JavaScriptParser.SingleExpressionContext(
                                                                                  self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 794
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 795
                        _la = self._input.LA(1)
                        if not (_la == JavaScriptParser.Plus or _la == JavaScriptParser.Minus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 796
                        self.singleExpression(26)
                        pass

                    elif la_ == 4:
                        localctx = JavaScriptParser.CoalesceExpressionContext(self,
                                                                              JavaScriptParser.SingleExpressionContext(
                                                                                  self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 797
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 798
                        self.match(JavaScriptParser.NullCoalesce)
                        self.state = 799
                        self.singleExpression(25)
                        pass

                    elif la_ == 5:
                        localctx = JavaScriptParser.BitShiftExpressionContext(self,
                                                                              JavaScriptParser.SingleExpressionContext(
                                                                                  self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 800
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 801
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << JavaScriptParser.RightShiftArithmetic) | (
                                1 << JavaScriptParser.LeftShiftArithmetic) | (
                                        1 << JavaScriptParser.RightShiftLogical))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 802
                        self.singleExpression(24)
                        pass

                    elif la_ == 6:
                        localctx = JavaScriptParser.RelationalExpressionContext(self,
                                                                                JavaScriptParser.SingleExpressionContext(
                                                                                    self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 803
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 804
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << JavaScriptParser.LessThan) | (1 << JavaScriptParser.MoreThan) | (
                                1 << JavaScriptParser.LessThanEquals) | (
                                        1 << JavaScriptParser.GreaterThanEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 805
                        self.singleExpression(23)
                        pass

                    elif la_ == 7:
                        localctx = JavaScriptParser.InstanceofExpressionContext(self,
                                                                                JavaScriptParser.SingleExpressionContext(
                                                                                    self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 806
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 807
                        self.match(JavaScriptParser.Instanceof)
                        self.state = 808
                        self.singleExpression(22)
                        pass

                    elif la_ == 8:
                        localctx = JavaScriptParser.InExpressionContext(self,
                                                                        JavaScriptParser.SingleExpressionContext(self,
                                                                                                                 _parentctx,
                                                                                                                 _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 809
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 810
                        self.match(JavaScriptParser.In)
                        self.state = 811
                        self.singleExpression(21)
                        pass

                    elif la_ == 9:
                        localctx = JavaScriptParser.EqualityExpressionContext(self,
                                                                              JavaScriptParser.SingleExpressionContext(
                                                                                  self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 812
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 813
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << JavaScriptParser.Equals_) | (1 << JavaScriptParser.NotEquals) | (
                                1 << JavaScriptParser.IdentityEquals) | (
                                        1 << JavaScriptParser.IdentityNotEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 814
                        self.singleExpression(20)
                        pass

                    elif la_ == 10:
                        localctx = JavaScriptParser.BitAndExpressionContext(self,
                                                                            JavaScriptParser.SingleExpressionContext(
                                                                                self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 815
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 816
                        self.match(JavaScriptParser.BitAnd)
                        self.state = 817
                        self.singleExpression(19)
                        pass

                    elif la_ == 11:
                        localctx = JavaScriptParser.BitXOrExpressionContext(self,
                                                                            JavaScriptParser.SingleExpressionContext(
                                                                                self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 818
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 819
                        self.match(JavaScriptParser.BitXOr)
                        self.state = 820
                        self.singleExpression(18)
                        pass

                    elif la_ == 12:
                        localctx = JavaScriptParser.BitOrExpressionContext(self,
                                                                           JavaScriptParser.SingleExpressionContext(
                                                                               self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 821
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 822
                        self.match(JavaScriptParser.BitOr)
                        self.state = 823
                        self.singleExpression(17)
                        pass

                    elif la_ == 13:
                        localctx = JavaScriptParser.LogicalAndExpressionContext(self,
                                                                                JavaScriptParser.SingleExpressionContext(
                                                                                    self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 824
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 825
                        self.match(JavaScriptParser.And)
                        self.state = 826
                        self.singleExpression(16)
                        pass

                    elif la_ == 14:
                        localctx = JavaScriptParser.LogicalOrExpressionContext(self,
                                                                               JavaScriptParser.SingleExpressionContext(
                                                                                   self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 827
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 828
                        self.match(JavaScriptParser.Or)
                        self.state = 829
                        self.singleExpression(15)
                        pass

                    elif la_ == 15:
                        localctx = JavaScriptParser.TernaryExpressionContext(self,
                                                                             JavaScriptParser.SingleExpressionContext(
                                                                                 self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 830
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 831
                        self.match(JavaScriptParser.QuestionMark)
                        self.state = 832
                        self.singleExpression(0)
                        self.state = 833
                        self.match(JavaScriptParser.Colon)
                        self.state = 834
                        self.singleExpression(14)
                        pass

                    elif la_ == 16:
                        localctx = JavaScriptParser.AssignmentExpressionContext(self,
                                                                                JavaScriptParser.SingleExpressionContext(
                                                                                    self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 836
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 837
                        self.match(JavaScriptParser.Assign)
                        self.state = 838
                        self.singleExpression(12)
                        pass

                    elif la_ == 17:
                        localctx = JavaScriptParser.AssignmentOperatorExpressionContext(self,
                                                                                        JavaScriptParser.SingleExpressionContext(
                                                                                            self, _parentctx,
                                                                                            _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 839
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 840
                        self.assignmentOperator()
                        self.state = 841
                        self.singleExpression(11)
                        pass

                    elif la_ == 18:
                        localctx = JavaScriptParser.MemberIndexExpressionContext(self,
                                                                                 JavaScriptParser.SingleExpressionContext(
                                                                                     self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 843
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 844
                        self.match(JavaScriptParser.OpenBracket)
                        self.state = 845
                        self.expressionSequence()
                        self.state = 846
                        self.match(JavaScriptParser.CloseBracket)
                        pass

                    elif la_ == 19:
                        localctx = JavaScriptParser.MemberDotExpressionContext(self,
                                                                               JavaScriptParser.SingleExpressionContext(
                                                                                   self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 848
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == JavaScriptParser.QuestionMark:
                            self.state = 849
                            self.match(JavaScriptParser.QuestionMark)

                        self.state = 852
                        self.match(JavaScriptParser.Dot)
                        self.state = 854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == JavaScriptParser.Hashtag:
                            self.state = 853
                            self.match(JavaScriptParser.Hashtag)

                        self.state = 856
                        self.identifierName()
                        pass

                    elif la_ == 20:
                        localctx = JavaScriptParser.ArgumentsExpressionContext(self,
                                                                               JavaScriptParser.SingleExpressionContext(
                                                                                   self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 857
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 858
                        self.arguments()
                        pass

                    elif la_ == 21:
                        localctx = JavaScriptParser.PostIncrementExpressionContext(self,
                                                                                   JavaScriptParser.SingleExpressionContext(
                                                                                       self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 859
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 860
                        if not self.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.notLineTerminator()")
                        self.state = 861
                        self.match(JavaScriptParser.PlusPlus)
                        pass

                    elif la_ == 22:
                        localctx = JavaScriptParser.PostDecreaseExpressionContext(self,
                                                                                  JavaScriptParser.SingleExpressionContext(
                                                                                      self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 862
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 863
                        if not self.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.notLineTerminator()")
                        self.state = 864
                        self.match(JavaScriptParser.MinusMinus)
                        pass

                    elif la_ == 23:
                        localctx = JavaScriptParser.TemplateStringExpressionContext(self,
                                                                                    JavaScriptParser.SingleExpressionContext(
                                                                                        self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 865
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 866
                        self.match(JavaScriptParser.TemplateStringLiteral)
                        pass

                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AssignableContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def arrayLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrayLiteralContext, 0)

        def objectLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.ObjectLiteralContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_assignable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignable"):
                listener.enterAssignable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignable"):
                listener.exitAssignable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignable"):
                return visitor.visitAssignable(self)
            else:
                return visitor.visitChildren(self)

    def assignable(self):

        localctx = JavaScriptParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_assignable)
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Async, JavaScriptParser.NonStrictLet, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.identifier()
                pass
            elif token in [JavaScriptParser.OpenBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.arrayLiteral()
                pass
            elif token in [JavaScriptParser.OpenBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 874
                self.objectLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyAssignment(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(JavaScriptParser.PropertyAssignmentContext)
            else:
                return self.getTypedRuleContext(JavaScriptParser.PropertyAssignmentContext, i)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_objectLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectLiteral"):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectLiteral"):
                listener.exitObjectLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectLiteral"):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)

    def objectLiteral(self):

        localctx = JavaScriptParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_objectLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(JavaScriptParser.OpenBrace)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
            if la_ == 1:
                self.state = 878
                self.propertyAssignment()
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 879
                        self.match(JavaScriptParser.Comma)
                        self.state = 880
                        self.propertyAssignment()
                    self.state = 885
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)

            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == JavaScriptParser.Comma:
                self.state = 888
                self.match(JavaScriptParser.Comma)

            self.state = 891
            self.match(JavaScriptParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnoymousFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaScriptParser.RULE_anoymousFunction

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AnoymousFunctionDeclContext(AnoymousFunctionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.AnoymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Function(self):
            return self.getToken(JavaScriptParser.Function, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnoymousFunctionDecl"):
                listener.enterAnoymousFunctionDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnoymousFunctionDecl"):
                listener.exitAnoymousFunctionDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnoymousFunctionDecl"):
                return visitor.visitAnoymousFunctionDecl(self)
            else:
                return visitor.visitChildren(self)

    class ArrowFunctionContext(AnoymousFunctionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.AnoymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrowFunctionParameters(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrowFunctionParametersContext, 0)

        def arrowFunctionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.ArrowFunctionBodyContext, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrowFunction"):
                listener.enterArrowFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrowFunction"):
                listener.exitArrowFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrowFunction"):
                return visitor.visitArrowFunction(self)
            else:
                return visitor.visitChildren(self)

    class FunctionDeclContext(AnoymousFunctionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a JavaScriptParser.AnoymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclaration(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionDeclarationContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionDecl"):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionDecl"):
                listener.exitFunctionDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionDecl"):
                return visitor.visitFunctionDecl(self)
            else:
                return visitor.visitChildren(self)

    def anoymousFunction(self):

        localctx = JavaScriptParser.AnoymousFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_anoymousFunction)
        self._la = 0  # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                localctx = JavaScriptParser.FunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.functionDeclaration()
                pass

            elif la_ == 2:
                localctx = JavaScriptParser.AnoymousFunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Async:
                    self.state = 894
                    self.match(JavaScriptParser.Async)

                self.state = 897
                self.match(JavaScriptParser.Function)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == JavaScriptParser.Multiply:
                    self.state = 898
                    self.match(JavaScriptParser.Multiply)

                self.state = 901
                self.match(JavaScriptParser.OpenParen)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (
                        1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and (
                        (1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 902
                    self.formalParameterList()

                self.state = 905
                self.match(JavaScriptParser.CloseParen)
                self.state = 906
                self.match(JavaScriptParser.OpenBrace)
                self.state = 907
                self.functionBody()
                self.state = 908
                self.match(JavaScriptParser.CloseBrace)
                pass

            elif la_ == 3:
                localctx = JavaScriptParser.ArrowFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                if la_ == 1:
                    self.state = 910
                    self.match(JavaScriptParser.Async)

                self.state = 913
                self.arrowFunctionParameters()
                self.state = 914
                self.match(JavaScriptParser.ARROW)
                self.state = 915
                self.arrowFunctionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowFunctionParametersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaScriptParser.FormalParameterListContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrowFunctionParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrowFunctionParameters"):
                listener.enterArrowFunctionParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrowFunctionParameters"):
                listener.exitArrowFunctionParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrowFunctionParameters"):
                return visitor.visitArrowFunctionParameters(self)
            else:
                return visitor.visitChildren(self)

    def arrowFunctionParameters(self):

        localctx = JavaScriptParser.ArrowFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arrowFunctionParameters)
        self._la = 0  # Token type
        try:
            self.state = 925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Async, JavaScriptParser.NonStrictLet, JavaScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.identifier()
                pass
            elif token in [JavaScriptParser.OpenParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.match(JavaScriptParser.OpenParen)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (
                        1 << JavaScriptParser.Ellipsis))) != 0) or ((((_la - 105)) & ~0x3f) == 0 and (
                        (1 << (_la - 105)) & (
                        (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                        1 << (JavaScriptParser.Identifier - 105)))) != 0):
                    self.state = 921
                    self.formalParameterList()

                self.state = 924
                self.match(JavaScriptParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowFunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(JavaScriptParser.SingleExpressionContext, 0)

        def functionBody(self):
            return self.getTypedRuleContext(JavaScriptParser.FunctionBodyContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_arrowFunctionBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrowFunctionBody"):
                listener.enterArrowFunctionBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrowFunctionBody"):
                listener.exitArrowFunctionBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrowFunctionBody"):
                return visitor.visitArrowFunctionBody(self)
            else:
                return visitor.visitChildren(self)

    def arrowFunctionBody(self):

        localctx = JavaScriptParser.ArrowFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arrowFunctionBody)
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(JavaScriptParser.OpenBrace)
                self.state = 929
                self.functionBody()
                self.state = 930
                self.match(JavaScriptParser.CloseBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return JavaScriptParser.RULE_assignmentOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentOperator"):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentOperator"):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentOperator"):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)

    def assignmentOperator(self):

        localctx = JavaScriptParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assignmentOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << JavaScriptParser.MultiplyAssign) | (1 << JavaScriptParser.DivideAssign) | (
                    1 << JavaScriptParser.ModulusAssign) | (1 << JavaScriptParser.PlusAssign) | (
                            1 << JavaScriptParser.MinusAssign) | (1 << JavaScriptParser.LeftShiftArithmeticAssign) | (
                            1 << JavaScriptParser.RightShiftArithmeticAssign) | (
                            1 << JavaScriptParser.RightShiftLogicalAssign) | (1 << JavaScriptParser.BitAndAssign) | (
                            1 << JavaScriptParser.BitXorAssign) | (1 << JavaScriptParser.BitOrAssign) | (
                            1 << JavaScriptParser.PowerAssign))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NullLiteral(self):
            return self.getToken(JavaScriptParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(JavaScriptParser.BooleanLiteral, 0)

        def StringLiteral(self):
            return self.getToken(JavaScriptParser.StringLiteral, 0)

        def TemplateStringLiteral(self):
            return self.getToken(JavaScriptParser.TemplateStringLiteral, 0)

        def RegularExpressionLiteral(self):
            return self.getToken(JavaScriptParser.RegularExpressionLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.NumericLiteralContext, 0)

        def bigintLiteral(self):
            return self.getTypedRuleContext(JavaScriptParser.BigintLiteralContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)

    def literal(self):

        localctx = JavaScriptParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_literal)
        try:
            self.state = 943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.NullLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.match(JavaScriptParser.NullLiteral)
                pass
            elif token in [JavaScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.match(JavaScriptParser.BooleanLiteral)
                pass
            elif token in [JavaScriptParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.match(JavaScriptParser.StringLiteral)
                pass
            elif token in [JavaScriptParser.TemplateStringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 939
                self.match(JavaScriptParser.TemplateStringLiteral)
                pass
            elif token in [JavaScriptParser.RegularExpressionLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 940
                self.match(JavaScriptParser.RegularExpressionLiteral)
                pass
            elif token in [JavaScriptParser.DecimalLiteral, JavaScriptParser.HexIntegerLiteral,
                           JavaScriptParser.OctalIntegerLiteral, JavaScriptParser.OctalIntegerLiteral2,
                           JavaScriptParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 941
                self.numericLiteral()
                pass
            elif token in [JavaScriptParser.BigHexIntegerLiteral, JavaScriptParser.BigOctalIntegerLiteral,
                           JavaScriptParser.BigBinaryIntegerLiteral, JavaScriptParser.BigDecimalIntegerLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 942
                self.bigintLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(JavaScriptParser.DecimalLiteral, 0)

        def HexIntegerLiteral(self):
            return self.getToken(JavaScriptParser.HexIntegerLiteral, 0)

        def OctalIntegerLiteral(self):
            return self.getToken(JavaScriptParser.OctalIntegerLiteral, 0)

        def OctalIntegerLiteral2(self):
            return self.getToken(JavaScriptParser.OctalIntegerLiteral2, 0)

        def BinaryIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_numericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteral"):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteral(self):

        localctx = JavaScriptParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_numericLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            _la = self._input.LA(1)
            if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & (
                    (1 << (JavaScriptParser.DecimalLiteral - 61)) | (1 << (JavaScriptParser.HexIntegerLiteral - 61)) | (
                    1 << (JavaScriptParser.OctalIntegerLiteral - 61)) | (
                            1 << (JavaScriptParser.OctalIntegerLiteral2 - 61)) | (
                            1 << (JavaScriptParser.BinaryIntegerLiteral - 61)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BigintLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BigDecimalIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0)

        def BigHexIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigHexIntegerLiteral, 0)

        def BigOctalIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0)

        def BigBinaryIntegerLiteral(self):
            return self.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_bigintLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBigintLiteral"):
                listener.enterBigintLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBigintLiteral"):
                listener.exitBigintLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBigintLiteral"):
                return visitor.visitBigintLiteral(self)
            else:
                return visitor.visitChildren(self)

    def bigintLiteral(self):

        localctx = JavaScriptParser.BigintLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_bigintLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (JavaScriptParser.BigHexIntegerLiteral - 66)) | (
                    1 << (JavaScriptParser.BigOctalIntegerLiteral - 66)) | (
                            1 << (JavaScriptParser.BigBinaryIntegerLiteral - 66)) | (
                            1 << (JavaScriptParser.BigDecimalIntegerLiteral - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_getter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGetter"):
                listener.enterGetter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGetter"):
                listener.exitGetter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGetter"):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)

    def getter(self):

        localctx = JavaScriptParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_getter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            if not self.n("get"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.n(\"get\")")
            self.state = 950
            self.identifier()
            self.state = 951
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def propertyName(self):
            return self.getTypedRuleContext(JavaScriptParser.PropertyNameContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_setter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetter"):
                listener.enterSetter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetter"):
                listener.exitSetter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetter"):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)

    def setter(self):

        localctx = JavaScriptParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_setter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            if not self.n("set"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.n(\"set\")")
            self.state = 954
            self.identifier()
            self.state = 955
            self.propertyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaScriptParser.IdentifierContext, 0)

        def reservedWord(self):
            return self.getTypedRuleContext(JavaScriptParser.ReservedWordContext, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_identifierName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierName"):
                listener.enterIdentifierName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierName"):
                listener.exitIdentifierName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierName"):
                return visitor.visitIdentifierName(self)
            else:
                return visitor.visitChildren(self)

    def identifierName(self):

        localctx = JavaScriptParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_identifierName)
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.reservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(JavaScriptParser.Identifier, 0)

        def NonStrictLet(self):
            return self.getToken(JavaScriptParser.NonStrictLet, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def identifier(self):

        localctx = JavaScriptParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_identifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            _la = self._input.LA(1)
            if not (((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & (
                    (1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (
                    1 << (JavaScriptParser.Identifier - 105)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(JavaScriptParser.KeywordContext, 0)

        def NullLiteral(self):
            return self.getToken(JavaScriptParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(JavaScriptParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_reservedWord

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReservedWord"):
                listener.enterReservedWord(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReservedWord"):
                listener.exitReservedWord(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReservedWord"):
                return visitor.visitReservedWord(self)
            else:
                return visitor.visitChildren(self)

    def reservedWord(self):

        localctx = JavaScriptParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_reservedWord)
        try:
            self.state = 966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Break, JavaScriptParser.Do, JavaScriptParser.Instanceof,
                         JavaScriptParser.Typeof, JavaScriptParser.Case, JavaScriptParser.Else, JavaScriptParser.New,
                         JavaScriptParser.Var, JavaScriptParser.Catch, JavaScriptParser.Finally,
                         JavaScriptParser.Return, JavaScriptParser.Void, JavaScriptParser.Continue,
                         JavaScriptParser.For, JavaScriptParser.Switch, JavaScriptParser.While,
                         JavaScriptParser.Debugger, JavaScriptParser.Function, JavaScriptParser.This,
                         JavaScriptParser.With, JavaScriptParser.Default, JavaScriptParser.If, JavaScriptParser.Throw,
                         JavaScriptParser.Delete, JavaScriptParser.In, JavaScriptParser.Try, JavaScriptParser.As,
                         JavaScriptParser.From, JavaScriptParser.Class, JavaScriptParser.Enum, JavaScriptParser.Extends,
                         JavaScriptParser.Super, JavaScriptParser.Const, JavaScriptParser.Export,
                         JavaScriptParser.Import, JavaScriptParser.Async, JavaScriptParser.Await,
                         JavaScriptParser.Implements, JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet,
                         JavaScriptParser.Private, JavaScriptParser.Public, JavaScriptParser.Interface,
                         JavaScriptParser.Package, JavaScriptParser.Protected, JavaScriptParser.Static,
                         JavaScriptParser.Yield]:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.keyword()
                pass
            elif token in [JavaScriptParser.NullLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.match(JavaScriptParser.NullLiteral)
                pass
            elif token in [JavaScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.match(JavaScriptParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(JavaScriptParser.Break, 0)

        def Do(self):
            return self.getToken(JavaScriptParser.Do, 0)

        def Instanceof(self):
            return self.getToken(JavaScriptParser.Instanceof, 0)

        def Typeof(self):
            return self.getToken(JavaScriptParser.Typeof, 0)

        def Case(self):
            return self.getToken(JavaScriptParser.Case, 0)

        def Else(self):
            return self.getToken(JavaScriptParser.Else, 0)

        def New(self):
            return self.getToken(JavaScriptParser.New, 0)

        def Var(self):
            return self.getToken(JavaScriptParser.Var, 0)

        def Catch(self):
            return self.getToken(JavaScriptParser.Catch, 0)

        def Finally(self):
            return self.getToken(JavaScriptParser.Finally, 0)

        def Return(self):
            return self.getToken(JavaScriptParser.Return, 0)

        def Void(self):
            return self.getToken(JavaScriptParser.Void, 0)

        def Continue(self):
            return self.getToken(JavaScriptParser.Continue, 0)

        def For(self):
            return self.getToken(JavaScriptParser.For, 0)

        def Switch(self):
            return self.getToken(JavaScriptParser.Switch, 0)

        def While(self):
            return self.getToken(JavaScriptParser.While, 0)

        def Debugger(self):
            return self.getToken(JavaScriptParser.Debugger, 0)

        def Function(self):
            return self.getToken(JavaScriptParser.Function, 0)

        def This(self):
            return self.getToken(JavaScriptParser.This, 0)

        def With(self):
            return self.getToken(JavaScriptParser.With, 0)

        def Default(self):
            return self.getToken(JavaScriptParser.Default, 0)

        def If(self):
            return self.getToken(JavaScriptParser.If, 0)

        def Throw(self):
            return self.getToken(JavaScriptParser.Throw, 0)

        def Delete(self):
            return self.getToken(JavaScriptParser.Delete, 0)

        def In(self):
            return self.getToken(JavaScriptParser.In, 0)

        def Try(self):
            return self.getToken(JavaScriptParser.Try, 0)

        def Class(self):
            return self.getToken(JavaScriptParser.Class, 0)

        def Enum(self):
            return self.getToken(JavaScriptParser.Enum, 0)

        def Extends(self):
            return self.getToken(JavaScriptParser.Extends, 0)

        def Super(self):
            return self.getToken(JavaScriptParser.Super, 0)

        def Const(self):
            return self.getToken(JavaScriptParser.Const, 0)

        def Export(self):
            return self.getToken(JavaScriptParser.Export, 0)

        def Import(self):
            return self.getToken(JavaScriptParser.Import, 0)

        def Implements(self):
            return self.getToken(JavaScriptParser.Implements, 0)

        def let(self):
            return self.getTypedRuleContext(JavaScriptParser.LetContext, 0)

        def Private(self):
            return self.getToken(JavaScriptParser.Private, 0)

        def Public(self):
            return self.getToken(JavaScriptParser.Public, 0)

        def Interface(self):
            return self.getToken(JavaScriptParser.Interface, 0)

        def Package(self):
            return self.getToken(JavaScriptParser.Package, 0)

        def Protected(self):
            return self.getToken(JavaScriptParser.Protected, 0)

        def Static(self):
            return self.getToken(JavaScriptParser.Static, 0)

        def Yield(self):
            return self.getToken(JavaScriptParser.Yield, 0)

        def Async(self):
            return self.getToken(JavaScriptParser.Async, 0)

        def Await(self):
            return self.getToken(JavaScriptParser.Await, 0)

        def From(self):
            return self.getToken(JavaScriptParser.From, 0)

        def As(self):
            return self.getToken(JavaScriptParser.As, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_keyword

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword"):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)

    def keyword(self):

        localctx = JavaScriptParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_keyword)
        try:
            self.state = 1014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaScriptParser.Break]:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(JavaScriptParser.Break)
                pass
            elif token in [JavaScriptParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.match(JavaScriptParser.Do)
                pass
            elif token in [JavaScriptParser.Instanceof]:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.match(JavaScriptParser.Instanceof)
                pass
            elif token in [JavaScriptParser.Typeof]:
                self.enterOuterAlt(localctx, 4)
                self.state = 971
                self.match(JavaScriptParser.Typeof)
                pass
            elif token in [JavaScriptParser.Case]:
                self.enterOuterAlt(localctx, 5)
                self.state = 972
                self.match(JavaScriptParser.Case)
                pass
            elif token in [JavaScriptParser.Else]:
                self.enterOuterAlt(localctx, 6)
                self.state = 973
                self.match(JavaScriptParser.Else)
                pass
            elif token in [JavaScriptParser.New]:
                self.enterOuterAlt(localctx, 7)
                self.state = 974
                self.match(JavaScriptParser.New)
                pass
            elif token in [JavaScriptParser.Var]:
                self.enterOuterAlt(localctx, 8)
                self.state = 975
                self.match(JavaScriptParser.Var)
                pass
            elif token in [JavaScriptParser.Catch]:
                self.enterOuterAlt(localctx, 9)
                self.state = 976
                self.match(JavaScriptParser.Catch)
                pass
            elif token in [JavaScriptParser.Finally]:
                self.enterOuterAlt(localctx, 10)
                self.state = 977
                self.match(JavaScriptParser.Finally)
                pass
            elif token in [JavaScriptParser.Return]:
                self.enterOuterAlt(localctx, 11)
                self.state = 978
                self.match(JavaScriptParser.Return)
                pass
            elif token in [JavaScriptParser.Void]:
                self.enterOuterAlt(localctx, 12)
                self.state = 979
                self.match(JavaScriptParser.Void)
                pass
            elif token in [JavaScriptParser.Continue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 980
                self.match(JavaScriptParser.Continue)
                pass
            elif token in [JavaScriptParser.For]:
                self.enterOuterAlt(localctx, 14)
                self.state = 981
                self.match(JavaScriptParser.For)
                pass
            elif token in [JavaScriptParser.Switch]:
                self.enterOuterAlt(localctx, 15)
                self.state = 982
                self.match(JavaScriptParser.Switch)
                pass
            elif token in [JavaScriptParser.While]:
                self.enterOuterAlt(localctx, 16)
                self.state = 983
                self.match(JavaScriptParser.While)
                pass
            elif token in [JavaScriptParser.Debugger]:
                self.enterOuterAlt(localctx, 17)
                self.state = 984
                self.match(JavaScriptParser.Debugger)
                pass
            elif token in [JavaScriptParser.Function]:
                self.enterOuterAlt(localctx, 18)
                self.state = 985
                self.match(JavaScriptParser.Function)
                pass
            elif token in [JavaScriptParser.This]:
                self.enterOuterAlt(localctx, 19)
                self.state = 986
                self.match(JavaScriptParser.This)
                pass
            elif token in [JavaScriptParser.With]:
                self.enterOuterAlt(localctx, 20)
                self.state = 987
                self.match(JavaScriptParser.With)
                pass
            elif token in [JavaScriptParser.Default]:
                self.enterOuterAlt(localctx, 21)
                self.state = 988
                self.match(JavaScriptParser.Default)
                pass
            elif token in [JavaScriptParser.If]:
                self.enterOuterAlt(localctx, 22)
                self.state = 989
                self.match(JavaScriptParser.If)
                pass
            elif token in [JavaScriptParser.Throw]:
                self.enterOuterAlt(localctx, 23)
                self.state = 990
                self.match(JavaScriptParser.Throw)
                pass
            elif token in [JavaScriptParser.Delete]:
                self.enterOuterAlt(localctx, 24)
                self.state = 991
                self.match(JavaScriptParser.Delete)
                pass
            elif token in [JavaScriptParser.In]:
                self.enterOuterAlt(localctx, 25)
                self.state = 992
                self.match(JavaScriptParser.In)
                pass
            elif token in [JavaScriptParser.Try]:
                self.enterOuterAlt(localctx, 26)
                self.state = 993
                self.match(JavaScriptParser.Try)
                pass
            elif token in [JavaScriptParser.Class]:
                self.enterOuterAlt(localctx, 27)
                self.state = 994
                self.match(JavaScriptParser.Class)
                pass
            elif token in [JavaScriptParser.Enum]:
                self.enterOuterAlt(localctx, 28)
                self.state = 995
                self.match(JavaScriptParser.Enum)
                pass
            elif token in [JavaScriptParser.Extends]:
                self.enterOuterAlt(localctx, 29)
                self.state = 996
                self.match(JavaScriptParser.Extends)
                pass
            elif token in [JavaScriptParser.Super]:
                self.enterOuterAlt(localctx, 30)
                self.state = 997
                self.match(JavaScriptParser.Super)
                pass
            elif token in [JavaScriptParser.Const]:
                self.enterOuterAlt(localctx, 31)
                self.state = 998
                self.match(JavaScriptParser.Const)
                pass
            elif token in [JavaScriptParser.Export]:
                self.enterOuterAlt(localctx, 32)
                self.state = 999
                self.match(JavaScriptParser.Export)
                pass
            elif token in [JavaScriptParser.Import]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1000
                self.match(JavaScriptParser.Import)
                pass
            elif token in [JavaScriptParser.Implements]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1001
                self.match(JavaScriptParser.Implements)
                pass
            elif token in [JavaScriptParser.StrictLet, JavaScriptParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1002
                self.let()
                pass
            elif token in [JavaScriptParser.Private]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1003
                self.match(JavaScriptParser.Private)
                pass
            elif token in [JavaScriptParser.Public]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1004
                self.match(JavaScriptParser.Public)
                pass
            elif token in [JavaScriptParser.Interface]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1005
                self.match(JavaScriptParser.Interface)
                pass
            elif token in [JavaScriptParser.Package]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1006
                self.match(JavaScriptParser.Package)
                pass
            elif token in [JavaScriptParser.Protected]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1007
                self.match(JavaScriptParser.Protected)
                pass
            elif token in [JavaScriptParser.Static]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1008
                self.match(JavaScriptParser.Static)
                pass
            elif token in [JavaScriptParser.Yield]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1009
                self.match(JavaScriptParser.Yield)
                pass
            elif token in [JavaScriptParser.Async]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1010
                self.match(JavaScriptParser.Async)
                pass
            elif token in [JavaScriptParser.Await]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1011
                self.match(JavaScriptParser.Await)
                pass
            elif token in [JavaScriptParser.From]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1012
                self.match(JavaScriptParser.From)
                pass
            elif token in [JavaScriptParser.As]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1013
                self.match(JavaScriptParser.As)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonStrictLet(self):
            return self.getToken(JavaScriptParser.NonStrictLet, 0)

        def StrictLet(self):
            return self.getToken(JavaScriptParser.StrictLet, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_let

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLet"):
                listener.enterLet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLet"):
                listener.exitLet(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLet"):
                return visitor.visitLet(self)
            else:
                return visitor.visitChildren(self)

    def let(self):

        localctx = JavaScriptParser.LetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_let)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            _la = self._input.LA(1)
            if not (_la == JavaScriptParser.StrictLet or _la == JavaScriptParser.NonStrictLet):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(JavaScriptParser.SemiColon, 0)

        def EOF(self):
            return self.getToken(JavaScriptParser.EOF, 0)

        def getRuleIndex(self):
            return JavaScriptParser.RULE_eos

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEos"):
                listener.enterEos(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEos"):
                listener.exitEos(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEos"):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)

    def eos(self):

        localctx = JavaScriptParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_eos)
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1018
                self.match(JavaScriptParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self.match(JavaScriptParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1020
                if not self.lineTerminatorAhead():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.lineTerminatorAhead()")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1021
                if not self.closeBrace():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.closeBrace()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[19] = self.expressionStatement_sempred
        self._predicates[21] = self.iterationStatement_sempred
        self._predicates[23] = self.continueStatement_sempred
        self._predicates[24] = self.breakStatement_sempred
        self._predicates[25] = self.returnStatement_sempred
        self._predicates[26] = self.yieldStatement_sempred
        self._predicates[34] = self.throwStatement_sempred
        self._predicates[42] = self.classElement_sempred
        self._predicates[57] = self.singleExpression_sempred
        self._predicates[67] = self.getter_sempred
        self._predicates[68] = self.setter_sempred
        self._predicates[74] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expressionStatement_sempred(self, localctx: ExpressionStatementContext, predIndex: int):
        if predIndex == 0:
            return self.notOpenBraceAndNotFunction()

    def iterationStatement_sempred(self, localctx: IterationStatementContext, predIndex: int):
        if predIndex == 1:
            return self.p("of")

    def continueStatement_sempred(self, localctx: ContinueStatementContext, predIndex: int):
        if predIndex == 2:
            return self.notLineTerminator()

    def breakStatement_sempred(self, localctx: BreakStatementContext, predIndex: int):
        if predIndex == 3:
            return self.notLineTerminator()

    def returnStatement_sempred(self, localctx: ReturnStatementContext, predIndex: int):
        if predIndex == 4:
            return self.notLineTerminator()

    def yieldStatement_sempred(self, localctx: YieldStatementContext, predIndex: int):
        if predIndex == 5:
            return self.notLineTerminator()

    def throwStatement_sempred(self, localctx: ThrowStatementContext, predIndex: int):
        if predIndex == 6:
            return self.notLineTerminator()

    def classElement_sempred(self, localctx: ClassElementContext, predIndex: int):
        if predIndex == 7:
            return self.n("static")

    def singleExpression_sempred(self, localctx: SingleExpressionContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 27)

        if predIndex == 9:
            return self.precpred(self._ctx, 26)

        if predIndex == 10:
            return self.precpred(self._ctx, 25)

        if predIndex == 11:
            return self.precpred(self._ctx, 24)

        if predIndex == 12:
            return self.precpred(self._ctx, 23)

        if predIndex == 13:
            return self.precpred(self._ctx, 22)

        if predIndex == 14:
            return self.precpred(self._ctx, 21)

        if predIndex == 15:
            return self.precpred(self._ctx, 20)

        if predIndex == 16:
            return self.precpred(self._ctx, 19)

        if predIndex == 17:
            return self.precpred(self._ctx, 18)

        if predIndex == 18:
            return self.precpred(self._ctx, 17)

        if predIndex == 19:
            return self.precpred(self._ctx, 16)

        if predIndex == 20:
            return self.precpred(self._ctx, 15)

        if predIndex == 21:
            return self.precpred(self._ctx, 14)

        if predIndex == 22:
            return self.precpred(self._ctx, 13)

        if predIndex == 23:
            return self.precpred(self._ctx, 12)

        if predIndex == 24:
            return self.precpred(self._ctx, 11)

        if predIndex == 25:
            return self.precpred(self._ctx, 44)

        if predIndex == 26:
            return self.precpred(self._ctx, 43)

        if predIndex == 27:
            return self.precpred(self._ctx, 42)

        if predIndex == 28:
            return self.precpred(self._ctx, 39)

        if predIndex == 29:
            return self.notLineTerminator()

        if predIndex == 30:
            return self.precpred(self._ctx, 38)

        if predIndex == 31:
            return self.notLineTerminator()

        if predIndex == 32:
            return self.precpred(self._ctx, 9)

    def getter_sempred(self, localctx: GetterContext, predIndex: int):
        if predIndex == 33:
            return self.n("get")

    def setter_sempred(self, localctx: SetterContext, predIndex: int):
        if predIndex == 34:
            return self.n("set")

    def eos_sempred(self, localctx: EosContext, predIndex: int):
        if predIndex == 35:
            return self.lineTerminatorAhead()

        if predIndex == 36:
            return self.closeBrace()
